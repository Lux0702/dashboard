{"version":3,"file":"static/js/3304.190eeeec.chunk.js","mappings":"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","sources":["views/notifications/alerts/Alerts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { format } from 'date-fns'\nimport {\n  CAlert,\n  CAlertHeading,\n  CAlertLink,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CDropdown,\n  CDropdownToggle,\n  CDropdownMenu,\n  CDropdownItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport * as icon from '@coreui/icons'\nimport { API_BASE_URL } from 'src/constant'\nimport { Spin } from 'antd'\nconst Alerts = () => {\n  const [posts, setPosts] = useState([])\n  const [spinning, setSpinning] = useState(false)\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      const userInfoString = localStorage.getItem('userInfo')\n      const userInfo = JSON.parse(userInfoString)\n      const token = userInfo.data.accessToken\n      try {\n        setSpinning(true)\n        const response = await fetch(`${API_BASE_URL}/admin/dashboard/posts`, {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        if (response.ok) {\n          const order = await response.json()\n          const sortedOrders = [...order.data].sort(\n            (a, b) => new Date(b.orderDate) - new Date(a.orderDate),\n          )\n          setPosts(sortedOrders)\n        } else {\n          console.error('Error fetching orders:', response.statusText)\n        }\n      } catch (error) {\n        console.error('Error fetching orders:', error)\n      } finally {\n        setSpinning(false)\n      }\n    }\n    fetchOrders()\n  }, [])\n  // const formatDate = (dateString) => {\n  //   const date = new Date(dateString)\n  //   return date.toLocaleDateString('en-CA')\n  // }\n  const formatDate = (dateString) => {\n    return format(new Date(dateString), 'dd-MM-yyyy')\n  }\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Thống kê bài viết</strong>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell scope=\"col\">*</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tên người đăng</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tiêu đề</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Nội dung</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Ngày đăng</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Trạng thái</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>\n                {posts.map((post, index) => (\n                  <CTableRow key={index}>\n                    <CTableDataCell>\n                      <CIcon icon={icon.cilList} size=\"xl\" />\n                    </CTableDataCell>\n                    <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                    <CTableDataCell>{post.postedBy ? post.postedBy.fullname : ''}</CTableDataCell>\n                    <CTableDataCell>{post.title}</CTableDataCell>\n                    <CTableDataCell>{post.content}</CTableDataCell>\n                    <CTableDataCell>{formatDate(post.postedDate)}</CTableDataCell>\n                    <CTableDataCell>{post.status}</CTableDataCell>\n                  </CTableRow>\n                ))}\n              </CTableBody>\n            </CTable>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <Spin spinning={spinning} fullscreen />\n    </CRow>\n  )\n}\n\nexport default Alerts\n"],"names":["Alerts","posts","setPosts","useState","spinning","setSpinning","useEffect","async","userInfoString","localStorage","getItem","token","JSON","parse","data","accessToken","response","fetch","concat","API_BASE_URL","method","headers","Authorization","ok","sortedOrders","json","sort","a","b","Date","orderDate","console","error","statusText","fetchOrders","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","post","index","CTableDataCell","CIcon","icon","size","postedBy","fullname","title","content","dateString","postedDate","format","status","Spin","fullscreen"],"sourceRoot":""}