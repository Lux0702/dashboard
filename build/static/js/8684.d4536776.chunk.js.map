{"version":3,"file":"static/js/8684.d4536776.chunk.js","mappings":"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","sources":["views/notifications/toasts/Toasts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CButton,\n  CRow,\n  CCol,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CModalFooter,\n  CFormInput,\n  CFormLabel,\n  CImage,\n  CDropdown,\n  CDropdownToggle,\n  CDropdownMenu,\n  CDropdownItem,\n  CModal,\n  CModalBody,\n  CModalHeader,\n  CModalTitle,\n  CInputGroupText,\n  CInputGroup,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n  CFormTextarea,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport * as icon from '@coreui/icons'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Spin } from 'antd'\nimport { API_BASE_URL } from 'src/constant'\nimport { format } from 'date-fns'\n\nconst Toasts = () => {\n  const [posts, setPosts] = useState([])\n  const [selectedRowId, setSelectedRowId] = useState(null)\n  const [postDetail, setPostDetail] = useState(null)\n  const [isOrderModalOpen, setIsOrderModalOpen] = useState(false)\n  const [spinning, setSpinning] = useState(false)\n\n  const [statusOptions, setStatusOptions] = useState([\n    { status: 'Pending', color: 'gray' },\n    { status: 'Rejected', color: 'red' },\n    { status: 'Approved', color: 'green' },\n  ])\n  const resetRow = () => {\n    setSelectedRowId(null)\n  }\n  useEffect(() => {\n    if (!isOrderModalOpen) {\n      resetRow()\n    }\n  }, [isOrderModalOpen])\n\n  const handleStatusChange = (id, selectedStatus) => {\n    // Cập nhật trạng thái cho đơn hàng với ID tương ứng\n    const updatedOrders = posts.map((post) =>\n      post.id === selectedRowId ? { ...post, status: selectedStatus } : post,\n    )\n    setPosts(updatedOrders)\n    updateOrderStatus(id, selectedStatus)\n  }\n  const handleRowClick = (id) => {\n    setSelectedRowId(id)\n    console.log(id)\n    setTimeout(() => handleShowPost(id), 0)\n  }\n  const handleShowPost = (id) => {\n    setPostDetail(posts.find((post) => post.id === id))\n    setIsOrderModalOpen(true)\n  }\n  //get post\n  const fetchOrders = async () => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    try {\n      setSpinning(true)\n      const response = await fetch(`${API_BASE_URL}/admin/dashboard/posts`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      if (response.ok) {\n        const order = await response.json()\n        const sortedOrders = [...order.data].sort(\n          (a, b) => new Date(b.orderDate) - new Date(a.orderDate),\n        )\n        setPosts(sortedOrders)\n      } else {\n        console.error('Error fetching orders:', response.statusText)\n      }\n    } catch (error) {\n      console.error('Error fetching orders:', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  useEffect(() => {\n    fetchOrders()\n  }, [])\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString('en-CA')\n  }\n  //Upload status order\n  const updateOrderStatus = async (id, newStatus) => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    console.log(id, 'và', newStatus)\n    try {\n      setSpinning(true)\n      const response = await fetch(`${API_BASE_URL}/admin/dashboard/posts/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ status: newStatus }),\n      })\n\n      if (response.ok) {\n        console.log(`Order ${id} status updated to ${newStatus}`)\n        const data = await response.json()\n        toast.success(data.message)\n        fetchOrders()\n      } else {\n        console.error('Error updating order status:', response.statusText)\n        const data = await response.json()\n        toast.error(data.message)\n      }\n    } catch (error) {\n      toast.error('Error updating order status:', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Danh sách bài viết</strong>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell scope=\"col\">*</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tên người đăng</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tiêu đề</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Nội dung</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Ngày đăng</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Trạng thái</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>\n                {posts.map((post, index) => (\n                  <CTableRow key={index}>\n                    <CTableDataCell>\n                      <CIcon\n                        icon={icon.cilList}\n                        size=\"xl\"\n                        onClick={() => handleRowClick(post.id)}\n                      />\n                    </CTableDataCell>\n                    <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                    <CTableDataCell>{post.postedBy ? post.postedBy.fullname : ''}</CTableDataCell>\n                    <CTableDataCell>{post.title}</CTableDataCell>\n                    <CTableDataCell style={{ width: '600px', height: '50px', overflowY: 'hidden' }}>\n                      <div\n                        style={{ maxHeight: '50px', overflow: 'hidden', textOverflow: 'ellipsis' }}\n                      >\n                        {post.content}\n                      </div>\n                    </CTableDataCell>\n                    <CTableDataCell>{formatDate(post.postedDate)}</CTableDataCell>\n                    <CTableDataCell>\n                      <CDropdown variant=\"btn-group\" style={{ borderRadius: '12px' }}>\n                        <CDropdownToggle\n                          style={{\n                            backgroundColor: statusOptions.find((opt) => opt.status === post.status)\n                              ?.color,\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '20px',\n                          }}\n                        >\n                          {post.status}\n                        </CDropdownToggle>\n                        <CDropdownMenu style={{ borderRadius: '12px' }}>\n                          {statusOptions.map((option, index) => (\n                            <CDropdownItem\n                              style={{ borderRadius: '12px' }}\n                              key={index}\n                              onClick={() => {\n                                setSelectedRowId(post.id)\n                                console.log('id là: ', post.id)\n                                handleStatusChange(post.id, option.status)\n                              }}\n                            >\n                              {option.status}\n                            </CDropdownItem>\n                          ))}\n                        </CDropdownMenu>\n                      </CDropdown>\n                    </CTableDataCell>\n                  </CTableRow>\n                ))}\n              </CTableBody>\n            </CTable>\n            {/* Modal xem chi tiết */}\n            <CModal\n              size=\"lg\"\n              alignment=\"center\"\n              visible={isOrderModalOpen}\n              onClose={() => {\n                setIsOrderModalOpen(false)\n              }}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>Chi tiết bài viết</CModalTitle>\n              </CModalHeader>\n              <CModalBody>\n                {/* Render product details here */}\n                {postDetail && (\n                  <>\n                    <p>\n                      Tên người đăng:\n                      <CFormInput\n                        aria-label=\"Tựa đề\"\n                        disabled\n                        value={postDetail.postedBy ? postDetail.postedBy.fullname : ''}\n                      />\n                    </p>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"12\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"orderDate\">Ngày đăng</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"date\"\n                            id=\"orderDate\"\n                            name=\"orderDate\"\n                            value={formatDate(postDetail.postedDate) || 0}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"12\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"status\">Trạng thái:</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"text\"\n                            id=\"status\"\n                            name=\"status\"\n                            value={postDetail.status || ''}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"12\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"content\">Nội dung bài viết:</CFormLabel>\n                          <CFormTextarea\n                            disabled\n                            rows={10}\n                            type=\"text\"\n                            id=\"content\"\n                            name=\"content\"\n                            value={postDetail.content}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div>\n                      <p>Bình luận:</p>\n                      <CAccordion flush>\n                        {postDetail &&\n                          postDetail.comments &&\n                          postDetail.comments.map((item, index) => (\n                            <CAccordionItem key={index}>\n                              <CAccordionHeader>\n                                <strong>Tên Người bình luận: </strong> {item.user.fullname}\n                              </CAccordionHeader>\n                              <CAccordionBody>\n                                <p>Mã bình luận. {item.id}</p>\n                                <p>\n                                  <strong>Nội dung:</strong> {item.comment}\n                                </p>\n                              </CAccordionBody>\n                            </CAccordionItem>\n                          ))}\n                      </CAccordion>\n                    </div>\n                  </>\n                )}\n              </CModalBody>\n              {/* <CModalFooter>\n            </CModalFooter> */}\n            </CModal>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n      />\n      <Spin spinning={spinning} fullscreen />\n    </CRow>\n  )\n}\n\nexport default Toasts\n"],"names":["Toasts","posts","setPosts","useState","selectedRowId","setSelectedRowId","postDetail","setPostDetail","isOrderModalOpen","setIsOrderModalOpen","spinning","setSpinning","statusOptions","setStatusOptions","status","color","useEffect","handleShowPost","id","find","post","fetchOrders","async","userInfoString","localStorage","getItem","token","JSON","parse","data","accessToken","response","fetch","concat","API_BASE_URL","method","headers","Authorization","ok","sortedOrders","json","sort","a","b","Date","orderDate","console","error","statusText","formatDate","dateString","toLocaleDateString","updateOrderStatus","newStatus","log","body","stringify","toast","success","message","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","index","_statusOptions$find","CTableDataCell","CIcon","icon","size","onClick","handleRowClick","setTimeout","postedBy","fullname","title","style","width","height","overflowY","maxHeight","overflow","textOverflow","content","postedDate","CDropdown","variant","borderRadius","CDropdownToggle","backgroundColor","opt","border","CDropdownMenu","option","CDropdownItem","handleStatusChange","selectedStatus","updatedOrders","CModal","alignment","visible","onClose","CModalHeader","closeButton","CModalTitle","CModalBody","_Fragment","CFormInput","disabled","value","CFormLabel","htmlFor","type","name","CFormTextarea","rows","CAccordion","flush","comments","item","CAccordionItem","CAccordionHeader","user","CAccordionBody","comment","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","Spin","fullscreen"],"sourceRoot":""}