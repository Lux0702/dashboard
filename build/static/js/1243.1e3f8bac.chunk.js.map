{"version":3,"file":"static/js/1243.1e3f8bac.chunk.js","mappings":"wNACO,MAAMA,EAAkBC,GACN,IAAIC,KAAKC,aAAa,QAAS,CACpDC,MAAO,WACPC,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,IACtBC,OAAOP,GAGCQ,EAAgBC,GACd,IAAIC,KAAKD,GACVE,mBAAmB,SAGpBC,EAAcH,IAClBF,EAAAA,EAAAA,GAAO,IAAIG,KAAKD,GAAa,a,gICKtC,MAiEA,EAjEeI,KACb,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,WAAS,GAuBzC,OApBAG,EAAAA,EAAAA,YAAU,KACWC,WACjB,IACEF,GAAY,GACZ,MAAMG,QAAiBC,MAAM,GAADC,OAAIC,EAAAA,EAAY,WAC5C,GAAIH,EAASI,GAAI,CACf,MAAMC,QAAaL,EAASM,OAC5BZ,EAASW,EAAKE,KAEhB,MACEC,QAAQC,MAAM,wBAAyBT,EAASU,WAEpD,CAAE,MAAOD,GACPD,QAAQC,MAAM,wBAAyBA,EACzC,CAAC,QACCZ,GAAY,EACd,GAEFc,EAAY,GACX,KAEDC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,GAAGH,UACXF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,GAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,wCAA0B,KAACC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gCAE5CC,EAAAA,EAAAA,KAACM,EAAAA,GAAS,CAAAP,UACRF,EAAAA,EAAAA,MAACU,EAAAA,GAAM,CAAAR,SAAA,EACLC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAAAT,UACTF,EAAAA,EAAAA,MAACY,EAAAA,GAAS,CAAAV,SAAA,EACRC,EAAAA,EAAAA,KAACU,EAAAA,GAAgB,CAACC,MAAM,MAAKZ,SAAC,OAC9BC,EAAAA,EAAAA,KAACU,EAAAA,GAAgB,CAACC,MAAM,MAAKZ,SAAC,2BAC9BC,EAAAA,EAAAA,KAACU,EAAAA,GAAgB,CAACC,MAAM,MAAKZ,SAAC,sBAC9BC,EAAAA,EAAAA,KAACU,EAAAA,GAAgB,CAACC,MAAM,MAAKZ,SAAC,2BAC9BC,EAAAA,EAAAA,KAACU,EAAAA,GAAgB,CAACC,MAAM,MAAKZ,SAAC,kBAC9BC,EAAAA,EAAAA,KAACU,EAAAA,GAAgB,CAACC,MAAM,MAAKZ,SAAC,4BAGlCC,EAAAA,EAAAA,KAACY,EAAAA,GAAU,CAAAb,SACRrB,EAAMmC,KAAI,CAACvB,EAAMwB,KAChBjB,EAAAA,EAAAA,MAACY,EAAAA,GAAS,CAAAV,SAAA,EACRC,EAAAA,EAAAA,KAACU,EAAAA,GAAgB,CAACC,MAAM,MAAKZ,SAAEe,EAAQ,KACvCd,EAAAA,EAAAA,KAACe,EAAAA,GAAc,CAAAhB,SAAET,EAAK0B,SACtBhB,EAAAA,EAAAA,KAACe,EAAAA,GAAc,CAAAhB,UAAEpC,EAAAA,EAAAA,IAAe2B,EAAK2B,QAAU,KAC/CjB,EAAAA,EAAAA,KAACe,EAAAA,GAAc,CAAAhB,SAAET,EAAK4B,MAAQ5B,EAAK6B,gBACnCnB,EAAAA,EAAAA,KAACe,EAAAA,GAAc,CAAAhB,SAAET,EAAK4B,SACtBlB,EAAAA,EAAAA,KAACe,EAAAA,GAAc,CAAAhB,SAAET,EAAK6B,iBANRL,kBAc5Bd,EAAAA,EAAAA,KAACoB,EAAAA,EAAI,CAACvC,SAAUA,EAAUwC,YAAU,MAC/B,C","sources":["utils/formatCurrent.js","views/notifications/badges/Badges.js"],"sourcesContent":["import { format } from 'date-fns'\nexport const formatCurrency = (value) => {\n  const formattedValue = new Intl.NumberFormat('vi-VN', {\n    style: 'currency',\n    currency: 'VND',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value)\n  return formattedValue\n}\nexport const formatDateV2 = (dateString) => {\n  const date = new Date(dateString)\n  return date.toLocaleDateString('en-CA')\n}\n\nexport const formatDate = (dateString) => {\n  return format(new Date(dateString), 'dd-MM-yyyy')\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CBadge,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { DocsExample } from 'src/components'\nimport { formatCurrency } from 'src/utils/formatCurrent'\nimport { Spin } from 'antd'\nimport { API_BASE_URL } from 'src/constant'\n\nconst Badges = () => {\n  const [books, setBooks] = useState([])\n  const [spinning, setSpinning] = useState(false)\n\n  //get all  book\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        setSpinning(true)\n        const response = await fetch(`${API_BASE_URL}/books`)\n        if (response.ok) {\n          const book = await response.json()\n          setBooks(book.data)\n          //console.log('Get data success', books)\n        } else {\n          console.error('Error fetching books:', response.statusText)\n        }\n      } catch (error) {\n        console.error('Error fetching books:', error)\n      } finally {\n        setSpinning(false)\n      }\n    }\n    fetchBooks()\n  }, [])\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Thống kê sản phẩm</strong> <small>Mặc định</small>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tựa đề</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Giá tiền</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Sô lượng</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tồn kho</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Đã bán</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>\n                {books.map((book, index) => (\n                  <CTableRow key={index}>\n                    <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                    <CTableDataCell>{book.title}</CTableDataCell>\n                    <CTableDataCell>{formatCurrency(book.price) || 0}</CTableDataCell>\n                    <CTableDataCell>{book.stock + book.soldQuantity}</CTableDataCell>\n                    <CTableDataCell>{book.stock}</CTableDataCell>\n                    <CTableDataCell>{book.soldQuantity}</CTableDataCell>\n                  </CTableRow>\n                ))}\n              </CTableBody>\n            </CTable>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <Spin spinning={spinning} fullscreen />\n    </CRow>\n  )\n}\n\nexport default Badges\n"],"names":["formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDateV2","dateString","Date","toLocaleDateString","formatDate","Badges","books","setBooks","useState","spinning","setSpinning","useEffect","async","response","fetch","concat","API_BASE_URL","ok","book","json","data","console","error","statusText","fetchBooks","_jsxs","CRow","children","_jsx","CCol","lg","CCard","className","CCardHeader","CCardBody","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","index","CTableDataCell","title","price","stock","soldQuantity","Spin","fullscreen"],"sourceRoot":""}