{"version":3,"file":"static/js/6409.47a1505c.chunk.js","mappings":"8TA0BA,MAmhBA,EAnhBeA,KACb,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KACtCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,OAC5BK,EAAQC,IAAaN,EAAAA,EAAAA,UAAS,OAC9BO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAS,KACtCS,EAASC,IAAcV,EAAAA,EAAAA,UAAS,KAChCW,EAAeC,IAAoBZ,EAAAA,EAAAA,UAAS,OAC5Ca,EAAiBC,IAAsBd,EAAAA,EAAAA,WAAS,IAChDe,EAAkBC,IAAuBhB,EAAAA,EAAAA,UAAS,OAClDiB,EAASC,IAAclB,EAAAA,EAAAA,WAAS,IAChCmB,EAAUC,IAAepB,EAAAA,EAAAA,WAAS,IAClCqB,EAAWC,IAAgBtB,EAAAA,EAAAA,UAAS,IACpCuB,EAASC,IAAcxB,EAAAA,EAAAA,UAAS,OAChCyB,EAAiBC,IAAsB1B,EAAAA,EAAAA,UAAS,OAChD2B,EAAYC,IAAiB5B,EAAAA,EAAAA,WAAS,IACtC6B,EAAeC,IAAoB9B,EAAAA,EAAAA,UAAS,CAAC,GAiH9C+B,EAAgBC,UACpB,MAAMC,EAAiBC,aAAaC,QAAQ,YAEtCC,EADWC,KAAKC,MAAML,GACLM,KAAKC,YAC5B,IACEpB,GAAY,GACZ,MAAMqB,QAAiBC,MAAM,GAADC,OAAIC,EAAAA,EAAY,eAAe,CACzDC,OAAQ,MACRC,QAAS,CACPC,cAAc,UAADJ,OAAYP,MAG7B,GAAIK,EAASO,GAAI,CACf,MAAMC,QAAaR,EAASS,OAC5B1C,EAAcyC,EAAKV,KACrB,MACEY,QAAQC,MAAM,wBAAyBX,EAASY,WAEpD,CAAE,MAAOD,GACPD,QAAQC,MAAM,wBAAyBA,EACzC,CAAC,QACChC,GAAY,EACd,IAEFkC,EAAAA,EAAAA,YAAU,KACRvB,GAAe,GACd,IAEH,MAAMwB,EAAcvB,UAClB,MAAMC,EAAiBC,aAAaC,QAAQ,YAEtCC,EADWC,KAAKC,MAAML,GACLM,KAAKC,YAC5B,IACEpB,GAAY,GACZ,MAAMqB,QAAiBC,MAAM,GAADC,OAAIC,EAAAA,EAAY,YAAY,CACtDC,OAAQ,MACRC,QAAS,CACPC,cAAc,UAADJ,OAAYP,MAG7B,GAAIK,EAASO,GAAI,CACf,MAAMC,QAAaR,EAASS,OAC5BxC,EAAWuC,EAAKV,KAClB,MACEY,QAAQC,MAAM,wBAAyBX,EAASY,WAEpD,CAAE,MAAOD,GACPD,QAAQC,MAAM,wBAAyBA,EACzC,CAAC,QACChC,GAAY,EACd,IAEFkC,EAAAA,EAAAA,YAAU,KACRC,GAAa,GACZ,KACHD,EAAAA,EAAAA,YAAU,KACHzC,IACHD,EAAiB,MACjBgB,GAAc,GACd7B,EAAgB,IAChBG,EAAc,IAChB,GACC,CAACW,IAEJ,MA2DM2C,EAAgB7C,IAEpBK,EAAoBL,GACpBO,GAAW,EAAK,EAKlB,OAHAoC,EAAAA,EAAAA,YAAU,KACRxB,EAAiBL,GAAmB,CAAC,EAAE,GACtC,CAACA,KAEFgC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,EAAEH,UACVF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,GAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,+BAAsB,KAACC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gCAExCF,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAP,SAAA,CACPxD,IAASyD,EAAAA,EAAAA,KAACO,EAAAA,GAAM,CAACC,MAAOjE,EAAMiE,MAAMT,SAAExD,EAAMkE,WAC7CZ,EAAAA,EAAAA,MAACa,EAAAA,GAAW,CAACN,UAAU,gBAAeL,SAAA,EACpCC,EAAAA,EAAAA,KAACW,EAAAA,GAAe,CAAAZ,SAAC,wBACjBC,EAAAA,EAAAA,KAACY,EAAAA,GAAU,CACT,aAAW,eACXC,MAAO3E,EACP4E,SAAWC,GAAM5E,EAAgB4E,EAAEC,OAAOH,aAG9Cb,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CAACT,MAAM,UAAUU,QA9PT9C,UACxB,MAAMC,EAAiBC,aAAaC,QAAQ,YAEtCC,EADWC,KAAKC,MAAML,GACLM,KAAKC,YAC5B,IACE,MAAMC,QAAiBC,MAAM,GAADC,OAAIC,EAAAA,EAAY,mBAAmB,CAC7DC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADJ,OAAYP,IAE3B2C,KAAM1C,KAAK2C,UAAU,CACnBlF,aAAcA,MAGlB,GAAI2C,EAASO,GACX5C,EAAS,CAAEgE,MAAO,UAAWC,QAAS,gDACtCtE,EAAgB,IAChBkF,YAAW,IAAM7E,EAAS,OAAO,KACjC2B,QACK,CACL,MAAMmD,QAAkBzC,EAASS,OACjC9C,EAAS,CAAEgE,MAAO,SAAUC,QAASa,EAAUb,SAAW,+BAC1DY,YAAW,IAAM7E,EAAS,OAAO,IACnC,CACF,CAAE,MAAOgD,GACPD,QAAQC,MAAM,yBAA0BA,GACxChD,EAAS,CAAEgE,MAAO,SAAUC,QAAS,+BACrCY,YAAW,IAAM7E,EAAS,OAAO,IACnC,GAiO4DuD,SAAC,qBAM3DC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,EAAEH,UACVF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,GAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,4BAAqB,KAACC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gCAEvCF,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAP,SAAA,CACPtD,IAAUuD,EAAAA,EAAAA,KAACO,EAAAA,GAAM,CAACC,MAAO/D,EAAO+D,MAAMT,SAAEtD,EAAOgE,WAChDZ,EAAAA,EAAAA,MAACa,EAAAA,GAAW,CAACN,UAAU,gBAAeL,SAAA,EACpCC,EAAAA,EAAAA,KAACW,EAAAA,GAAe,CAAAZ,SAAC,qBACjBC,EAAAA,EAAAA,KAACY,EAAAA,GAAU,CACT,aAAW,aACXC,MAAOxE,EACPyE,SAAWC,GAAMzE,EAAcyE,EAAEC,OAAOH,aAG5Cb,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CAACT,MAAM,UAAUU,QArPX9C,UACtB,MAAMC,EAAiBC,aAAaC,QAAQ,YAEtCC,EADWC,KAAKC,MAAML,GACLM,KAAKC,YAC5B,IACE,MAAMC,QAAiBC,MAAM,GAADC,OAAIC,EAAAA,EAAY,gBAAgB,CAC1DC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADJ,OAAYP,IAE3B2C,KAAM1C,KAAK2C,UAAU,CACnB/E,WAAYA,MAGhB,GAAIwC,EAASO,GACX1C,EAAU,CAAE8D,MAAO,UAAWC,QAAS,6CACvCnE,EAAc,IACd+E,YAAW,IAAM3E,EAAU,OAAO,KAClCiD,QACK,CACL,MAAM2B,QAAkBzC,EAASS,OACjC5C,EAAU,CAAE8D,MAAO,SAAUC,QAASa,EAAUb,SAAW,+BAC3DY,YAAW,IAAM3E,EAAU,OAAO,IACpC,CACF,CAAE,MAAO8C,GACPD,QAAQC,MAAM,yBAA0BA,GACxC9C,EAAU,CAAE8D,MAAO,SAAUC,QAAS,+BACtCY,YAAW,IAAM3E,EAAU,OAAO,IACpC,GAwN0DqD,SAAC,qBAMzDC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,GAAGH,UACXF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,GAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBAAkB,KAACC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gCAEpCC,EAAAA,EAAAA,KAACM,EAAAA,GAAS,CAAAP,UACRC,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CACHC,iBAAiB,IACjBC,KAAK,OACLC,KAAM,QAGNC,MAAO,CACL,CACEC,MAAO,kCACPC,IAAK,IACL9B,UACEF,EAAAA,EAAAA,MAACiC,EAAAA,GAAM,CAAA/B,SAAA,EACLC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CAAAhC,UACTF,EAAAA,EAAAA,MAACmC,EAAAA,GAAS,CAAAjC,SAAA,EACRC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAC,OAC9BC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAC,wBAC9BC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAC,qCAC9BC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAMC,MAAO,CAAEC,UAAW,UAAWrC,SAAC,yBAKlEC,EAAAA,EAAAA,KAACqC,EAAAA,GAAU,CAAAtC,SACRpD,EAAW2F,KAAI,CAACC,EAAUC,KACzB3C,EAAAA,EAAAA,MAACmC,EAAAA,GAAS,CAERS,OAAQ1F,IAAkBwF,EAASG,GACnC3C,SAAA,EAEAC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAEyC,EAAQ,KACvCxC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAc,CAAA5C,SAAEwC,EAASrG,gBAC1B8D,EAAAA,EAAAA,KAAC2C,EAAAA,GAAc,CAAA5C,SAAEwC,EAASK,MAAMC,UAChChD,EAAAA,EAAAA,MAAC8C,EAAAA,GAAc,CAACR,MAAO,CAAEC,UAAW,UAAWrC,SAAA,EAC7CC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CACJX,MAAO,CAAEY,YAAa,QACtBC,KAAMA,EAAAA,EACNtB,KAAK,KACLtB,UAAU,yCACVc,QAASA,KAvJRwB,MAwJC1E,GAAc,GAxJf0E,EAyJuBH,EAASG,GAxJ7D1F,EAAiB0F,GACjBnD,QAAQ0D,IAAIP,GACZ5E,EAAmBnB,EAAWuG,MAAMX,GAAaA,EAASG,KAAOA,KACjExF,GAAmB,EAqJ6C,KAGtC8C,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CACJE,KAAMA,EAAAA,EACNtB,KAAK,KACLtB,UAAU,0CACVc,QAASA,KACPlD,GAAc,GACd4B,EAAa2C,EAASG,IACtBnD,QAAQ0D,IAAIV,EAASG,GAAG,SAzBzBF,WAmCjB,CACEZ,MAAO,+BACPC,IAAK,IACL9B,UACEF,EAAAA,EAAAA,MAACiC,EAAAA,GAAM,CAAA/B,SAAA,EACLC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CAAAhC,UACTF,EAAAA,EAAAA,MAACmC,EAAAA,GAAS,CAAAjC,SAAA,EACRC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAC,OAC9BC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAC,qBAC9BC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAC,qCAC9BC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAMC,MAAO,CAAEC,UAAW,UAAWrC,SAAC,yBAKlEC,EAAAA,EAAAA,KAACqC,EAAAA,GAAU,CAAAtC,SACRlD,EAAQyF,KAAI,CAACa,EAAQX,KACpB3C,EAAAA,EAAAA,MAACmC,EAAAA,GAAS,CAERS,OAAQ1F,IAAkBoG,EAAOT,GACjC3C,SAAA,EAEAC,EAAAA,EAAAA,KAACiC,EAAAA,GAAgB,CAACC,MAAM,MAAKnC,SAAEyC,EAAQ,KACvCxC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAc,CAAA5C,SAAEoD,EAAO9G,cACxB2D,EAAAA,EAAAA,KAAC2C,EAAAA,GAAc,CAAA5C,SAAEoD,EAAOP,MAAMC,UAC9BhD,EAAAA,EAAAA,MAAC8C,EAAAA,GAAc,CAACR,MAAO,CAAEC,UAAW,UAAWrC,SAAA,EAC7CC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CACJX,MAAO,CAAEY,YAAa,QACtBC,KAAMA,EAAAA,EACNtB,KAAK,KACLtB,UAAU,yCACVc,QAASA,KAlNTwB,MAmNE1E,GAAc,GAnNhB0E,EAoNuBS,EAAOT,GAnN1D1F,EAAiB0F,GACjBnD,QAAQ0D,IAAIP,GACZ5E,EAAmBjB,EAAQqG,MAAME,GAAWA,EAAOV,KAAOA,KAC1DxF,GAAmB,EAgN0C,KAGnC8C,EAAAA,EAAAA,KAAC8C,EAAAA,EAAK,CACJE,KAAMA,EAAAA,EACNtB,KAAK,KACLtB,UAAU,0CACVc,QAASA,KACPlD,GAAc,GACd4B,EAAauD,EAAOT,IACpBnD,QAAQ0D,IAAIE,EAAOT,GAAG,SAzBvBF,sBAwC3BxC,EAAAA,EAAAA,KAACqD,EAAAA,GAAc,CACbC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,EACZC,MAAM,WAER/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAI,CAACzG,SAAUA,EAAU0G,YAAU,KACpCpE,EAAAA,EAAAA,MAACqE,EAAAA,GAAM,CACLxC,KAAK,KACLyC,UAAU,SACV9G,QAASJ,EACTmH,QAASA,KACPlH,GAAmB,GACnBc,GAAc,EAAM,EACpB+B,SAAA,EAEFC,EAAAA,EAAAA,KAACqE,EAAAA,GAAY,CAACC,aAAW,EAAAvE,UACvBC,EAAAA,EAAAA,KAACuE,EAAAA,GAAW,CAAAxE,SAAEhC,EAAa,8BAAiB,gCAE9C8B,EAAAA,EAAAA,MAAC2E,EAAAA,GAAU,CAAAzE,SAAA,CAERR,QAAQ0D,IAAIpF,GACZA,IACCmC,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACGhC,EAAa,qBAAa,oBAC3BiC,EAAAA,EAAAA,KAACY,EAAAA,GAAU,CACT,aAAY7C,EAAa,eAAiB,aAC1C0G,KAAM1G,EAAa,eAAiB,aACpC8C,MAAO5C,EAAcF,EAAa,eAAiB,eAAiB,GACpE+C,SAAWC,IACT,MAAM,KAAE0D,EAAI,MAAE5D,GAAUE,EAAEC,OAC1B9C,GAAkBwG,IAAW,IACxBA,EACH,CAACD,GAAO5D,MAEVjD,EAAWiD,EAAM,aAQ7BhB,EAAAA,EAAAA,MAAC8E,EAAAA,GAAY,CAAA5E,SAAA,EACXC,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CACNT,MAAM,UACNU,QAASA,KA5YE9C,WACnB,MAAMC,EAAiBC,aAAaC,QAAQ,YAEtCC,EADWC,KAAKC,MAAML,GACLM,KAAKC,YAC5BW,QAAQ0D,IAAI,UAAWtF,GACvB,IACEH,GAAY,GACZ,MAAMqB,QAAiBC,MAAM,GAADC,OACvBC,EAAAA,EAAY,KAAAD,OAAIhB,EAAa,aAAe,UAAS,KAAAgB,OAAI2D,GAC5D,CACEzD,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADJ,OAAYP,IAE3B2C,KAAM1C,KAAK2C,UAAU,CACnBlF,aAAcyB,EACdtB,WAAYsB,MAIlB,GAAIkB,EAASO,GAAI,CACf,MAAMwF,QAAa/F,EAASS,OAC5BpC,GAAmB,GACnB2H,EAAAA,GAAMC,QAAQF,EAAKnE,SACnBnE,EAAc,IACdH,EAAgB,IAChB6B,GAAc,GACd2B,IACAxB,GACF,KAAO,CACL,MAAMmD,QAAkBzC,EAASS,OACjCuF,EAAAA,GAAMrF,MAAM8B,EAAUb,QACxB,CACF,CAAE,MAAOjB,GACPD,QAAQC,MAAM,yBAA0BA,GACxCqF,EAAAA,GAAMrF,MAAM,+BAAiBA,EAC/B,CAAC,QACChC,GAAY,EACd,GAsWUuH,CAAahI,EAAc,EAC3BgD,SACH,cAGDC,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CACNT,MAAM,SACNU,QAASA,KACPtB,EAAa7C,EAAc,EAC3BgD,SACH,kBAMLF,EAAAA,EAAAA,MAACqE,EAAAA,GAAM,CACLC,UAAU,SACV9G,QAASA,EACT+G,QAASA,KACP9G,GAAW,GACXU,GAAc,EAAM,EAEtB,kBAAgB,0BAAyB+B,SAAA,EAEzCC,EAAAA,EAAAA,KAACqE,EAAAA,GAAY,CAACC,aAAW,EAAAvE,UACvBC,EAAAA,EAAAA,KAACuE,EAAAA,GAAW,CAAC7B,GAAG,0BAAyB3C,SAAC,+BAE5CC,EAAAA,EAAAA,KAACwE,EAAAA,GAAU,CAAAzE,SAAC,gDACZF,EAAAA,EAAAA,MAAC8E,EAAAA,GAAY,CAAA5E,SAAA,EACXC,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CAACT,MAAM,YAAYU,QArTd8D,KAEnB1H,GAAW,GACXiC,QAAQ0D,IAAI,mCAAoClG,EAAc,EAkTPgD,SAAC,cAGlDC,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CACNT,MAAM,SACNU,QAASA,KArTG9C,WACpBd,GAAW,GACXiC,QAAQ0D,IAAI,oCAAqClG,GACjD,MAAMsB,EAAiBC,aAAaC,QAAQ,YAEtCC,EADWC,KAAKC,MAAML,GACLM,KAAKC,YAE5B,IACEpB,GAAY,GACZ,MAAMqB,QAAiBC,MAAM,GAADC,OACvBC,EAAAA,EAAY,KAAAD,OAAIhB,EAAa,aAAe,UAAS,KAAAgB,OAAIhC,GAC5D,CACEkC,OAAQ,SACRC,QAAS,CACPC,cAAc,UAADJ,OAAYP,MAI/B,GAAIK,EAASO,GAAI,CACfG,QAAQ0D,IAAI,gBAADlE,OAAiBhC,EAAa,0BAEzCH,GAAeqI,GAASA,EAAKC,QAAQ3C,GAAaA,EAASG,KAAO3F,MAClED,GAAYmI,GAASA,EAAKC,QAAQ9B,GAAWA,EAAOV,KAAO3F,MAC3D,MAAM4B,QAAaE,EAASS,OAC5BuF,EAAAA,GAAMC,QAAQnG,EAAK8B,QAAS,CAC1B2D,QAASA,KACPlH,GAAmB,GACnBE,EAAoB,MACpBY,GAAc,EAAM,GAG1B,KAAO,CACL,MAAMW,QAAaE,EAASS,OAC5BuF,EAAAA,GAAMrF,MAAMb,EAAK8B,SACjBlB,QAAQC,MAAM,+BAADT,OAAgChC,EAAa,KAAK8B,EAASY,WAC1E,CACF,CAAE,MAAOD,GACPqF,EAAAA,GAAMrF,MAAM,+BAADT,OAAgChC,EAAa,KAAKyC,EAC/D,CAAC,QACChC,GAAY,EACd,GA8QU2H,CAAchI,EAAiB,EAC/B4C,SACH,mBAKA,C,mCCziBD,IAACqF,EAAY,CAAC,UAAW,0b,mCCAzB,IAACC,EAAW,CAAC,UAAW,mrB","sources":["views/forms/select/Select.js","../node_modules/@coreui/icons/src/free/cil-pencil.ts","../node_modules/@coreui/icons/src/free/cil-trash.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { CCard, CCardBody, CCardHeader, CCol, CAlert, CRow } from '@coreui/react'\nimport { CFormInput, CInputGroup, CInputGroupText, CButton } from '@coreui/react'\nimport {\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CModalFooter,\n  CFormLabel,\n  CImage,\n  CFormTextarea,\n  CModal,\n  CModalBody,\n  CModalHeader,\n  CModalTitle,\n} from '@coreui/react'\nimport { Spin, Tabs } from 'antd'\nimport CIcon from '@coreui/icons-react'\nimport * as icon from '@coreui/icons'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { API_BASE_URL } from 'src/constant'\n\nconst Select = () => {\n  const [categoryName, setCategoryName] = useState('')\n  const [authorName, setAuthorName] = useState('')\n  const [alert, setAlert] = useState(null)\n  const [alert2, setAlert2] = useState(null)\n  const [categories, setCategories] = useState([])\n  const [authors, setAuthors] = useState([])\n  const [selectedRowId, setSelectedRowId] = useState(null)\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false)\n  const [selectedDeleteId, setSelectedDeleteId] = useState(null)\n  const [visible, setVisible] = useState(false)\n  const [spinning, setSpinning] = useState(false)\n  const [activeTab, setActiveTab] = useState(0)\n  const [Content, setContent] = useState(null)\n  const [selectedContent, setSelectedContent] = useState(null)\n  const [isCategory, setIsCategory] = useState(false)\n  const [editedContent, setEditedContent] = useState({})\n  const toggleTab = (tabIndex) => {\n    setActiveTab(tabIndex)\n  }\n  const handleInputChange = (e) => {\n    const { name, value } = e.target\n    setContent(value)\n  }\n  const handleAddCategory = async () => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    try {\n      const response = await fetch(`${API_BASE_URL}/categories/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          categoryName: categoryName,\n        }),\n      })\n      if (response.ok) {\n        setAlert({ color: 'success', message: 'Thêm thể loại thành công' })\n        setCategoryName('')\n        setTimeout(() => setAlert(null), 1000)\n        fetchCategory()\n      } else {\n        const errorData = await response.json()\n        setAlert({ color: 'danger', message: errorData.message || 'Có lỗi xảy ra' })\n        setTimeout(() => setAlert(null), 2000)\n      }\n    } catch (error) {\n      console.error('Error adding category:', error)\n      setAlert({ color: 'danger', message: 'Lỗi kết nối' })\n      setTimeout(() => setAlert(null), 2000)\n    }\n  }\n  const handleAddAuthor = async () => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    try {\n      const response = await fetch(`${API_BASE_URL}/authors/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          authorName: authorName,\n        }),\n      })\n      if (response.ok) {\n        setAlert2({ color: 'success', message: 'Thêm tác giả thành công' })\n        setAuthorName('')\n        setTimeout(() => setAlert2(null), 1000)\n        fetchAuthor()\n      } else {\n        const errorData = await response.json()\n        setAlert2({ color: 'danger', message: errorData.message || 'Có lỗi xảy ra' })\n        setTimeout(() => setAlert2(null), 1000)\n      }\n    } catch (error) {\n      console.error('Error adding category:', error)\n      setAlert2({ color: 'danger', message: 'Lỗi kết nối' })\n      setTimeout(() => setAlert2(null), 2000)\n    }\n  }\n  //upload category/author\n  const handleUpload = async (id) => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    console.log('cate/au', Content)\n    try {\n      setSpinning(true)\n      const response = await fetch(\n        `${API_BASE_URL}/${isCategory ? 'categories' : 'authors'}/${id}`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify({\n            categoryName: Content,\n            authorName: Content,\n          }),\n        },\n      )\n      if (response.ok) {\n        const Data = await response.json()\n        setIsUserModalOpen(false)\n        toast.success(Data.message)\n        setAuthorName('')\n        setCategoryName('')\n        setIsCategory(false)\n        fetchAuthor()\n        fetchCategory()\n      } else {\n        const errorData = await response.json()\n        toast.error(errorData.message)\n      }\n    } catch (error) {\n      console.error('Error adding category:', error)\n      toast.error('Lỗi kết nối :', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  //get category\n  const fetchCategory = async () => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    try {\n      setSpinning(true)\n      const response = await fetch(`${API_BASE_URL}/categories`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      if (response.ok) {\n        const post = await response.json()\n        setCategories(post.data)\n      } else {\n        console.error('Error fetching users:', response.statusText)\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  useEffect(() => {\n    fetchCategory()\n  }, [])\n  //get authorr\n  const fetchAuthor = async () => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    try {\n      setSpinning(true)\n      const response = await fetch(`${API_BASE_URL}/authors`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      if (response.ok) {\n        const post = await response.json()\n        setAuthors(post.data)\n      } else {\n        console.error('Error fetching users:', response.statusText)\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  useEffect(() => {\n    fetchAuthor()\n  }, [])\n  useEffect(() => {\n    if (!isUserModalOpen) {\n      setSelectedRowId(null)\n      setIsCategory(false)\n      setCategoryName('')\n      setAuthorName('')\n    }\n  }, [isUserModalOpen])\n\n  const handleRowClickAuthor = (id) => {\n    setSelectedRowId(id)\n    console.log(id)\n    setSelectedContent(authors.find((author) => author.id === id))\n    setIsUserModalOpen(true)\n  }\n  const handleRowClicCategory = (id) => {\n    setSelectedRowId(id)\n    console.log(id)\n    setSelectedContent(categories.find((category) => category.id === id))\n    setIsUserModalOpen(true)\n  }\n  const cancelDelete = () => {\n    // Close modal without performing deletion\n    setVisible(false)\n    console.log('Selected Row ID in handleDelete:', selectedRowId)\n  }\n  const confirmDelete = async (selectedRowId) => {\n    setVisible(false)\n    console.log('Selected Row ID in confirmDelete:', selectedRowId)\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    // Loop through selectedItems and send DELETE requests\n    try {\n      setSpinning(true)\n      const response = await fetch(\n        `${API_BASE_URL}/${isCategory ? 'categories' : 'authors'}/${selectedRowId}`,\n        {\n          method: 'DELETE',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        },\n      )\n      if (response.ok) {\n        console.log(`Book with ID ${selectedRowId} deleted successfully`)\n        // Optionally, update the UI to remove the deleted items\n        setCategories((prev) => prev.filter((category) => category.id !== selectedRowId))\n        setAuthors((prev) => prev.filter((author) => author.id !== selectedRowId))\n        const data = await response.json()\n        toast.success(data.message, {\n          onClose: () => {\n            setIsUserModalOpen(false)\n            setSelectedDeleteId(null)\n            setIsCategory(false)\n          },\n        })\n      } else {\n        const data = await response.json()\n        toast.error(data.message)\n        console.error(`Error deleting user with ID ${selectedRowId}:`, response.statusText)\n      }\n    } catch (error) {\n      toast.error(`Error deleting user with ID ${selectedRowId}:`, error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  const handleDelete = (selectedRowId) => {\n    // Display confirmation modal\n    setSelectedDeleteId(selectedRowId)\n    setVisible(true)\n  }\n  useEffect(() => {\n    setEditedContent(selectedContent || {})\n  }, [selectedContent])\n  return (\n    <CRow>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Thêm thể loại</strong> <small>Mặc định</small>\n          </CCardHeader>\n          <CCardBody>\n            {alert && <CAlert color={alert.color}>{alert.message}</CAlert>}\n            <CInputGroup className=\"profile-input\">\n              <CInputGroupText>Thể loại</CInputGroupText>\n              <CFormInput\n                aria-label=\"categoryName\"\n                value={categoryName}\n                onChange={(e) => setCategoryName(e.target.value)}\n              />\n            </CInputGroup>\n            <br />\n            <CButton color=\"primary\" onClick={handleAddCategory}>\n              Thêm\n            </CButton>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Thêm tác giả</strong> <small>Mặc định</small>\n          </CCardHeader>\n          <CCardBody>\n            {alert2 && <CAlert color={alert2.color}>{alert2.message}</CAlert>}\n            <CInputGroup className=\"profile-input\">\n              <CInputGroupText>Tác giả</CInputGroupText>\n              <CFormInput\n                aria-label=\"authorName\"\n                value={authorName}\n                onChange={(e) => setAuthorName(e.target.value)}\n              />\n            </CInputGroup>\n            <br />\n            <CButton color=\"primary\" onClick={handleAddAuthor}>\n              Thêm\n            </CButton>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Danh sách</strong> <small>Mặc định</small>\n          </CCardHeader>\n          <CCardBody>\n            <Tabs\n              defaultActiveKey=\"1\"\n              type=\"card\"\n              size={'large'}\n              // activeKey={activeTab.toString()}\n              // onChange={(key) => toggleTab(parseInt(key, 10))}\n              items={[\n                {\n                  label: 'Danh sách thể loại',\n                  key: '1',\n                  children: (\n                    <CTable>\n                      <CTableHead>\n                        <CTableRow>\n                          <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Thể loại</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Số lượng sách</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\" style={{ textAlign: 'center' }}>\n                            Tác vụ\n                          </CTableHeaderCell>\n                        </CTableRow>\n                      </CTableHead>\n                      <CTableBody>\n                        {categories.map((category, index) => (\n                          <CTableRow\n                            key={index}\n                            active={selectedRowId === category.id}\n                            // onClick={() => handleRowClick(user._id)}\n                          >\n                            <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                            <CTableDataCell>{category.categoryName}</CTableDataCell>\n                            <CTableDataCell>{category.books.length}</CTableDataCell>\n                            <CTableDataCell style={{ textAlign: 'center' }}>\n                              <CIcon\n                                style={{ marginRight: '10px' }}\n                                icon={icon.cilPencil} // Sử dụng biểu tượng xóa từ thư viện\n                                size=\"lg\" // Kích thước của biểu tượng (có thể là 'sm', 'md', 'lg', 'xl', ...)\n                                className=\"text-danger cursor-pointer icon-access\" // CSS classes khác (nếu cần)\n                                onClick={() => {\n                                  setIsCategory(true)\n                                  handleRowClicCategory(category.id)\n                                }}\n                              />\n                              <CIcon\n                                icon={icon.cilTrash} // Sử dụng biểu tượng sửa từ thư viện\n                                size=\"lg\" // Kích thước của biểu tượng (có thể là 'sm', 'md', 'lg', 'xl', ...)\n                                className=\"text-primary cursor-pointer icon-access\" // CSS classes khác (nếu cần)\n                                onClick={() => {\n                                  setIsCategory(true)\n                                  handleDelete(category.id)\n                                  console.log(category.id)\n                                }}\n                              />\n                            </CTableDataCell>\n                          </CTableRow>\n                        ))}\n                      </CTableBody>\n                    </CTable>\n                  ),\n                },\n                {\n                  label: 'Danh sách tác giả',\n                  key: '2',\n                  children: (\n                    <CTable>\n                      <CTableHead>\n                        <CTableRow>\n                          <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Tác giả</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Số lượng sách</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\" style={{ textAlign: 'center' }}>\n                            Tác vụ\n                          </CTableHeaderCell>\n                        </CTableRow>\n                      </CTableHead>\n                      <CTableBody>\n                        {authors.map((auhtor, index) => (\n                          <CTableRow\n                            key={index}\n                            active={selectedRowId === auhtor.id}\n                            // onClick={() => handleRowClick(user._id)}\n                          >\n                            <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                            <CTableDataCell>{auhtor.authorName}</CTableDataCell>\n                            <CTableDataCell>{auhtor.books.length}</CTableDataCell>\n                            <CTableDataCell style={{ textAlign: 'center' }}>\n                              <CIcon\n                                style={{ marginRight: '10px' }}\n                                icon={icon.cilPencil} // Sử dụng biểu tượng xóa từ thư viện\n                                size=\"lg\" // Kích thước của biểu tượng (có thể là 'sm', 'md', 'lg', 'xl', ...)\n                                className=\"text-danger cursor-pointer icon-access\" // CSS classes khác (nếu cần)\n                                onClick={() => {\n                                  setIsCategory(false)\n                                  handleRowClickAuthor(auhtor.id)\n                                }}\n                              />\n                              <CIcon\n                                icon={icon.cilTrash} // Sử dụng biểu tượng sửa từ thư viện\n                                size=\"lg\" // Kích thước của biểu tượng (có thể là 'sm', 'md', 'lg', 'xl', ...)\n                                className=\"text-primary cursor-pointer icon-access\" // CSS classes khác (nếu cần)\n                                onClick={() => {\n                                  setIsCategory(true)\n                                  handleDelete(auhtor.id)\n                                  console.log(auhtor.id)\n                                }}\n                              />\n                            </CTableDataCell>\n                          </CTableRow>\n                        ))}\n                      </CTableBody>\n                    </CTable>\n                  ),\n                },\n              ]}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n      />\n      <Spin spinning={spinning} fullscreen />\n      <CModal\n        size=\"lg\"\n        alignment=\"center\"\n        visible={isUserModalOpen}\n        onClose={() => {\n          setIsUserModalOpen(false)\n          setIsCategory(false)\n        }}\n      >\n        <CModalHeader closeButton>\n          <CModalTitle>{isCategory ? 'Sửa thể loại' : 'Sửa tác giả'}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          {/* Render product details here */}\n          {console.log(selectedContent)}\n          {selectedContent && (\n            <div>\n              <p>\n                {isCategory ? 'Thể loại' : 'Tác giả:'}\n                <CFormInput\n                  aria-label={isCategory ? 'categoryName' : 'authorName'}\n                  name={isCategory ? 'categoryName' : 'authorName'}\n                  value={editedContent[isCategory ? 'categoryName' : 'authorName'] || ''}\n                  onChange={(e) => {\n                    const { name, value } = e.target\n                    setEditedContent((prevContent) => ({\n                      ...prevContent,\n                      [name]: value,\n                    }))\n                    setContent(value)\n                  }}\n                />\n              </p>\n            </div>\n          )}\n        </CModalBody>\n\n        <CModalFooter>\n          <CButton\n            color=\"success\"\n            onClick={() => {\n              handleUpload(selectedRowId)\n            }}\n          >\n            Lưu\n          </CButton>\n          <CButton\n            color=\"danger\"\n            onClick={() => {\n              handleDelete(selectedRowId)\n            }}\n          >\n            Xóa\n          </CButton>\n        </CModalFooter>\n      </CModal>\n      {/* Thông báo xóa */}\n      <CModal\n        alignment=\"center\"\n        visible={visible}\n        onClose={() => {\n          setVisible(false)\n          setIsCategory(false)\n        }}\n        aria-labelledby=\"DeleteConfirmationModal\"\n      >\n        <CModalHeader closeButton>\n          <CModalTitle id=\"DeleteConfirmationModal\">Xác nhận xóa</CModalTitle>\n        </CModalHeader>\n        <CModalBody>Bạn có chắc muốn xóa?</CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={cancelDelete}>\n            Hủy\n          </CButton>\n          <CButton\n            color=\"danger\"\n            onClick={() => {\n              confirmDelete(selectedDeleteId)\n            }}\n          >\n            Xóa\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </CRow>\n  )\n}\n\nexport default Select\n","export var cilPencil = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M29.663,482.25l.087.087a24.847,24.847,0,0,0,17.612,7.342,25.178,25.178,0,0,0,8.1-1.345l142.006-48.172,272.5-272.5A88.832,88.832,0,0,0,344.334,42.039l-272.5,272.5L23.666,456.541A24.844,24.844,0,0,0,29.663,482.25Zm337.3-417.584a56.832,56.832,0,0,1,80.371,80.373L411.5,180.873,331.127,100.5ZM99.744,331.884,308.5,123.127,388.873,203.5,180.116,412.256,58.482,453.518Z' class='ci-primary'/>\"];\n","export var cilTrash = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M96,472a23.82,23.82,0,0,0,23.579,24H392.421A23.82,23.82,0,0,0,416,472V152H96Zm32-288H384V464H128Z' class='ci-primary'/><rect width='32' height='200' x='168' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='240' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='312' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M328,88V40c0-13.458-9.488-24-21.6-24H205.6C193.488,16,184,26.542,184,40V88H64v32H448V88ZM216,48h80V88H216Z' class='ci-primary'/>\"];\n"],"names":["Select","categoryName","setCategoryName","useState","authorName","setAuthorName","alert","setAlert","alert2","setAlert2","categories","setCategories","authors","setAuthors","selectedRowId","setSelectedRowId","isUserModalOpen","setIsUserModalOpen","selectedDeleteId","setSelectedDeleteId","visible","setVisible","spinning","setSpinning","activeTab","setActiveTab","Content","setContent","selectedContent","setSelectedContent","isCategory","setIsCategory","editedContent","setEditedContent","fetchCategory","async","userInfoString","localStorage","getItem","token","JSON","parse","data","accessToken","response","fetch","concat","API_BASE_URL","method","headers","Authorization","ok","post","json","console","error","statusText","useEffect","fetchAuthor","handleDelete","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","CAlert","color","message","CInputGroup","CInputGroupText","CFormInput","value","onChange","e","target","CButton","onClick","body","stringify","setTimeout","errorData","Tabs","defaultActiveKey","type","size","items","label","key","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","style","textAlign","CTableBody","map","category","index","active","id","CTableDataCell","books","length","CIcon","marginRight","icon","log","find","auhtor","author","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","Spin","fullscreen","CModal","alignment","onClose","CModalHeader","closeButton","CModalTitle","CModalBody","name","prevContent","CModalFooter","Data","toast","success","handleUpload","cancelDelete","prev","filter","confirmDelete","cilPencil","cilTrash"],"sourceRoot":""}