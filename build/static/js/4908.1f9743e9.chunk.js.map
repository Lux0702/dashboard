{"version":3,"file":"static/js/4908.1f9743e9.chunk.js","mappings":"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","sources":["utils/formatCurrent.js","views/notifications/modals/Modals.js","../node_modules/@coreui/utils/src/getStyle.ts","../node_modules/@coreui/utils/src/hexToRgba.ts"],"sourcesContent":["import { format } from 'date-fns'\nexport const formatCurrency = (value) => {\n  const formattedValue = new Intl.NumberFormat('vi-VN', {\n    style: 'currency',\n    currency: 'VND',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value)\n  return formattedValue\n}\nexport const formatDateV2 = (dateString) => {\n  const date = new Date(dateString)\n  return date.toLocaleDateString('en-CA')\n}\n\nexport const formatDate = (dateString) => {\n  return format(new Date(dateString), 'dd-MM-yyyy')\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CLink,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CPopover,\n  CRow,\n  CButtonGroup,\n  CNav,\n  CNavItem,\n  CNavLink,\n  CTabContent,\n  CTabPane,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { CChartLine, CChartBar } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport '@coreui/coreui/dist/css/coreui.min.css'\nimport { Radio, Tabs, Spin } from 'antd'\nimport { API_BASE_URL } from 'src/constant'\nimport { formatCurrency } from 'src/utils/formatCurrent'\nconst Modals = () => {\n  const [visible, setVisible] = useState(false)\n  const [statitic, setIsStatitic] = useState([])\n  const [currentStats, setCurrentStats] = useState('daily')\n  const [activeTab, setActiveTab] = useState(0)\n  const [spinning, setSpinning] = useState(false)\n  const toggleTab = (tabIndex) => {\n    setActiveTab(tabIndex)\n  }\n  //get statitic\n  useEffect(() => {\n    const fetchStatitic = async () => {\n      const userInfoString = localStorage.getItem('userInfo')\n      const userInfo = JSON.parse(userInfoString)\n      const token = userInfo.data.accessToken\n      try {\n        setSpinning(true)\n        const response = await fetch(`${API_BASE_URL}/admin/statistics`, {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        if (response.ok) {\n          const stattitic = await response.json()\n          setIsStatitic(stattitic)\n          console.log(stattitic)\n        } else {\n          console.error('Error fetching users:', response.statusText)\n        }\n      } catch (error) {\n        console.error('Error fetching users:', error)\n      } finally {\n        setSpinning(false)\n      }\n    }\n    fetchStatitic()\n  }, [])\n  const data = {\n    daily: {\n      labels: statitic.data?.revenueByDay ? Object.keys(statitic.data.revenueByDay) : [],\n      datasets: [\n        {\n          label: 'Daily Revenue',\n          backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n          borderColor: getStyle('--cui-info'),\n          pointHoverBackgroundColor: getStyle('--cui-info'),\n          borderWidth: 2,\n          data: statitic.data?.revenueByDay\n            ? Object.entries(statitic.data.revenueByDay).map(([day, value]) => {\n                console.log('Day:', day, 'Value:', value)\n                return value // Chỉ cần thêm giá trị vào mảng data\n              })\n            : [],\n          fill: true,\n        },\n      ],\n    },\n    monthly: {\n      labels: statitic.data?.revenueByMonth ? Object.keys(statitic.data.revenueByMonth) : [],\n      datasets: [\n        {\n          label: 'Monthly Revenue',\n          backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n          borderColor: getStyle('--cui-info'),\n          pointHoverBackgroundColor: getStyle('--cui-info'),\n          borderWidth: 2,\n          data: statitic.data?.revenueByMonth\n            ? Object.entries(statitic.data.revenueByMonth).map(([month, value]) => {\n                console.log('Month:', month, 'Value:', value)\n                return value // Chỉ cần thêm giá trị vào mảng data\n              })\n            : [],\n          fill: true,\n        },\n      ],\n    },\n    yearly: {\n      labels: statitic.data?.revenueByYear ? Object.keys(statitic.data.revenueByYear) : [],\n      datasets: [\n        {\n          label: 'Yearly Revenue',\n          backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n          borderColor: getStyle('--cui-info'),\n          pointHoverBackgroundColor: getStyle('--cui-info'),\n          borderWidth: 2,\n          data: statitic.data?.revenueByYear\n            ? Object.entries(statitic.data.revenueByYear).map(([year, value]) => {\n                console.log('Year:', year, 'Value:', value)\n                return value // Chỉ cần thêm giá trị vào mảng data\n              })\n            : [],\n          fill: true,\n        },\n      ],\n    },\n  }\n  const statsOptions = [\n    { value: 'daily', label: 'Ngày' },\n    { value: 'monthly', label: 'Tháng' },\n    { value: 'yearly', label: 'Năm' },\n  ]\n  const handleDateRangeChange = (newDateRange) => {}\n  return (\n    <CRow>\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Thống kê bán hàng\n              </h4>\n              <div className=\"small text-medium-emphasis\"></div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButtonGroup className=\"float-end me-3\">\n                {statsOptions.map((option) => (\n                  <CButton\n                    color=\"outline-secondary\"\n                    key={option.value}\n                    className=\"mx-0\"\n                    active={currentStats === option.value}\n                    onClick={() => {\n                      setCurrentStats(option.value)\n                      handleDateRangeChange(option.value)\n                    }}\n                  >\n                    {option.label}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartBar\n            style={{ height: '300px', marginTop: '40px' }}\n            data={data[currentStats]}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n                datalabels: {\n                  anchor: 'end',\n                  align: 'top',\n                  offset: 8,\n                  font: {\n                    weight: 'bold',\n                  },\n                  formatter: (value) => value.toLocaleString(),\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n      <CCard>\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Thống kê chi tiết\n              </h4>\n              <br />\n            </CCol>\n            <Tabs\n              defaultActiveKey=\"1\"\n              type=\"card\"\n              size={'large'}\n              items={[\n                {\n                  label: 'Ngày',\n                  key: '1',\n                  children: (\n                    <CTable>\n                      <CTableHead>\n                        <CTableRow>\n                          <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Thống kê theo ngày</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Doanh thu</CTableHeaderCell>\n                        </CTableRow>\n                      </CTableHead>\n                      <CTableBody>\n                        {statitic.data &&\n                          Object.entries(statitic.data.revenueByDay).map(([date, value], index) => (\n                            <CTableRow key={index}>\n                              <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                              <CTableDataCell>{date}</CTableDataCell>\n                              <CTableDataCell>{formatCurrency(value) || 0}</CTableDataCell>\n                            </CTableRow>\n                          ))}\n                      </CTableBody>\n                    </CTable>\n                  ),\n                },\n                {\n                  label: 'Tháng',\n                  key: '2',\n                  children: (\n                    <CTable>\n                      <CTableHead>\n                        <CTableRow>\n                          <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Thống kê theo tháng</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Doanh thu</CTableHeaderCell>\n                        </CTableRow>\n                      </CTableHead>\n                      <CTableBody>\n                        {statitic.data &&\n                          Object.entries(statitic.data.revenueByMonth).map(\n                            ([date, value], index) => (\n                              <CTableRow key={index}>\n                                <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                                <CTableDataCell>{date}</CTableDataCell>\n                                <CTableDataCell>{formatCurrency(value) || 0} </CTableDataCell>\n                              </CTableRow>\n                            ),\n                          )}\n                      </CTableBody>\n                    </CTable>\n                  ),\n                },\n                {\n                  label: 'Năm',\n                  key: '3',\n                  children: (\n                    <CTable>\n                      <CTableHead>\n                        <CTableRow>\n                          <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Thống kê theo năm</CTableHeaderCell>\n                          <CTableHeaderCell scope=\"col\">Doanh thu</CTableHeaderCell>\n                        </CTableRow>\n                      </CTableHead>\n                      <CTableBody>\n                        {statitic.data &&\n                          Object.entries(statitic.data.revenueByYear).map(\n                            ([date, value], index) => (\n                              <CTableRow key={index}>\n                                <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                                <CTableDataCell>{date}</CTableDataCell>\n                                <CTableDataCell>{formatCurrency(value) || 0}</CTableDataCell>\n                              </CTableRow>\n                            ),\n                          )}\n                      </CTableBody>\n                    </CTable>\n                  ),\n                },\n              ]}\n            />\n          </CRow>\n        </CCardBody>\n      </CCard>\n      <Spin spinning={spinning} fullscreen />\n    </CRow>\n  )\n}\n\nexport default Modals\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): getStyle.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst getStyle = (property: string, element?: Element) => {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  if (typeof document === 'undefined') {\n    return\n  }\n\n  const _element = element ?? document.body\n\n  return window.getComputedStyle(_element, null).getPropertyValue(property).replace(/^\\s/, '')\n}\n\nexport default getStyle\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): hexToRgba.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst hexToRgba = (color: string, opacity = 100) => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n\n  if (!hex) {\n    throw new Error(`${color} is not a valid hex color`)\n  }\n\n  let r\n  let g\n  let b\n\n  if (color.length === 7) {\n    r = parseInt(color.slice(1, 3), 16)\n    g = parseInt(color.slice(3, 5), 16)\n    b = parseInt(color.slice(5, 7), 16)\n  } else {\n    r = parseInt(color.slice(1, 2), 16)\n    g = parseInt(color.slice(2, 3), 16)\n    b = parseInt(color.slice(3, 5), 16)\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${opacity / 100})`\n}\n\nexport default hexToRgba\n"],"names":["formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDateV2","dateString","Date","toLocaleDateString","formatDate","Modals","_statitic$data","_statitic$data2","_statitic$data3","_statitic$data4","_statitic$data5","_statitic$data6","visible","setVisible","useState","statitic","setIsStatitic","currentStats","setCurrentStats","activeTab","setActiveTab","spinning","setSpinning","useEffect","async","userInfoString","localStorage","getItem","token","JSON","parse","data","accessToken","response","fetch","concat","API_BASE_URL","method","headers","Authorization","ok","stattitic","json","console","log","error","statusText","fetchStatitic","daily","labels","revenueByDay","Object","keys","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","entries","map","_ref","day","fill","monthly","revenueByMonth","_ref2","month","yearly","revenueByYear","_ref3","year","_jsxs","CRow","children","_jsx","CCard","className","CCardBody","CCol","sm","id","CButtonGroup","option","CButton","color","active","onClick","CChartBar","height","marginTop","options","maintainAspectRatio","plugins","legend","display","datalabels","anchor","align","offset","font","weight","formatter","toLocaleString","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","Math","ceil","max","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","Tabs","defaultActiveKey","type","size","items","key","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","_ref4","index","date","CTableDataCell","_ref5","_ref6","Spin","fullscreen","property","element","window","document","_element","body","getComputedStyle","getPropertyValue","replace","opacity","TypeError","r","g","b","match","Error","length","parseInt","slice"],"sourceRoot":""}