{"version":3,"file":"static/js/1839.fe9d2414.chunk.js","mappings":"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","sources":["views/forms/checks-radios/ChecksRadios.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CButton,\n  CDropdown,\n  CDropdownDivider,\n  CDropdownHeader,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CFormInput,\n  CFormLabel,\n  CImage,\n  CFormTextarea,\n} from '@coreui/react'\nimport Select from 'react-select'\nimport './ListBook.css'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { API_BASE_URL } from 'src/constant'\nimport { Spin, Tabs } from 'antd'\n\nconst Tables = () => {\n  const [books, setBooks] = useState([])\n  const [selectedItems, setSelectedItems] = useState([])\n  const [visible, setVisible] = useState(false)\n  const [isAllChecked, setIsAllChecked] = useState(false)\n  const [selectedRowId, setSelectedRowId] = useState(null)\n  const [isPopupOpen, setIsPopupOpen] = useState(false)\n  const [productDetails, setProductDetails] = useState(null)\n  const [isProductModalOpen, setIsProductModalOpen] = useState(false)\n  // Lấy category, author show/edit\n  const [categoryOptions, setCategoryOptions] = useState([])\n  const [selectedCategories, setSelectedCategories] = useState([])\n  const [authorOptions, setAuthorOptions] = useState([])\n  const [selectedAuthors, setSelectedAuthors] = useState(null)\n  const [selectedFile, setSelectedFile] = useState(null)\n  const [isEditMode, setIsEditMode] = useState(false)\n  const [selectedDeleteId, setSelectedDeleteId] = useState(null)\n  const [spinning, setSpinning] = useState(false)\n  //info book\n  const [formData, setFormData] = useState({\n    title: '',\n    categories: [],\n    stock: 0,\n    authors: [],\n    price: 0,\n    isbn: '',\n    pageNumbers: '',\n    publishedDate: '',\n    publisher: '',\n    language: '',\n    description: '',\n    image: null,\n  })\n  //Truyền data vào formData\n  useEffect(() => {\n    if (productDetails) {\n      // const { title, categories, stock, authors, price, image } = productDetails\n      // Tiếp tục với logic set giá trị cho formData\n      setFormData({\n        title: productDetails.title || '',\n        categories: productDetails.categories || [],\n        stock: productDetails.stock || 0,\n        authors: productDetails.authors || [],\n        price: productDetails.price || 0,\n        isbn: productDetails.isbn || '',\n        pageNumbers: productDetails.pageNumbers || '',\n        publishedDate: productDetails.publishedDate || '',\n        publisher: productDetails.publisher || '',\n        language: productDetails.language || '',\n        description: productDetails.description || '',\n        image: productDetails.image || null,\n      })\n    }\n  }, [productDetails])\n  const resetProductDetails = () => {\n    setSelectedCategories(null)\n    setSelectedAuthors(null)\n    //setSelectedRowId(null)\n    setSelectedDeleteId(null)\n  }\n  useEffect(() => {\n    if (!isProductModalOpen) {\n      resetProductDetails()\n      setIsEditMode(false)\n      setSelectedRowId(null)\n    }\n  }, [isProductModalOpen])\n  //get all  book\n  const fetchBooks = async () => {\n    try {\n      setSpinning(true)\n      const response = await fetch(`${API_BASE_URL}/books`)\n      if (response.ok) {\n        const book = await response.json()\n        setBooks(book.data)\n        //console.log('Get data success', books)\n      } else {\n        console.error('Error fetching books:', response.statusText)\n      }\n    } catch (error) {\n      console.error('Error fetching books:', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  useEffect(() => {\n    fetchBooks()\n  }, [])\n  //get all categoiesy/authors\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        setSpinning(true)\n        const categoryResponse = await fetch(`${API_BASE_URL}/categories`)\n        if (categoryResponse.ok) {\n          const categoryData = await categoryResponse.json()\n          // In ra console để xem dữ liệu trả về từ API\n          console.log('categoryData:', categoryData)\n          // Kiểm tra xem categoryData có thuộc tính categories không\n          if (categoryData && categoryData.data && Array.isArray(categoryData.data)) {\n            setCategoryOptions(\n              categoryData.data.map((category) => ({\n                value: category.categoryName,\n                label: category.categoryName,\n              })),\n            )\n          } else {\n            console.error('Dữ liệu từ API không đúng định dạng.')\n          }\n        } else {\n          console.error('Không thể lấy dữ liệu từ API.')\n        }\n        const authorResponse = await fetch(`${API_BASE_URL}/authors`)\n        if (authorResponse.ok) {\n          const authorData = await authorResponse.json()\n          // In ra console để xem dữ liệu trả về từ API\n          console.log('categoryData:', authorData)\n          // Kiểm tra xem categoryData có thuộc tính categories không\n          if (authorData && authorData.data && Array.isArray(authorData.data)) {\n            setAuthorOptions(\n              authorData.data.map((author) => ({\n                value: author.authorName,\n                label: author.authorName,\n              })),\n            )\n          } else {\n            console.error('Dữ liệu từ API không đúng định dạng.')\n          }\n        } else {\n          console.error('Không thể lấy dữ liệu từ API.')\n        }\n      } catch (error) {\n        console.error('Lỗi trong quá trình lấy dữ liệu từ API:', error)\n      } finally {\n        setSpinning(false)\n      }\n    }\n\n    fetchOptions()\n  }, [])\n\n  useEffect(() => {\n    setIsAllChecked(selectedItems.length === books.length)\n  }, [selectedItems, books])\n  const handleRowClick = (id) => {\n    setSelectedRowId(id)\n    console.log(id)\n    //setIsPopupOpen(true)\n    //handleShowProduct(selectedRowId)\n  }\n  // const handleCheckboxChange = (id) => {\n  //   setSelectedItems((prevSelectedItems) => {\n  //     if (prevSelectedItems.includes(id)) {\n  //       return prevSelectedItems.filter((item) => item !== id)\n  //     } else {\n  //       return [...prevSelectedItems, id]\n  //     }\n  //   })\n  //   setSelectedRowId(id)\n  // }\n  // const handleCheckAllChange = () => {\n  //   if (isAllChecked) {\n  //     setSelectedItems([]) // Uncheck all\n  //   } else {\n  //     // Check all by mapping books to get IDs\n  //     const allIds = books.map((book) => book._id)\n  //     setSelectedItems(allIds)\n  //   }\n  // }\n  //Delect book\n  const handleDelete = async (selectedRowId) => {\n    // Display confirmation modal\n    setSelectedDeleteId(selectedRowId)\n    setVisible(true)\n    console.log('Selected Row ID in handleDelete:', selectedRowId)\n    console.log('Selected Row ID in handleDelete -delete:', selectedDeleteId)\n  }\n  //api xóa book\n  const confirmDelete = async (selectedRowId) => {\n    setVisible(false)\n    console.log('Selected Row ID in confirmDelete:', selectedRowId)\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    // Loop through selectedItems and send DELETE requests\n    try {\n      setSpinning(true)\n      const response = await fetch(`${API_BASE_URL}/books/${selectedRowId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      if (response.ok) {\n        console.log(`Book with ID ${selectedRowId} deleted successfully`)\n        // Optionally, update the UI to remove the deleted items\n        setBooks((prevBooks) => prevBooks.filter((book) => book._id !== selectedRowId))\n        const data = await response.json()\n        toast.success(data.message, {\n          onClose: () => {\n            setIsProductModalOpen(false)\n            setSelectedDeleteId(null)\n          },\n        })\n      } else {\n        const data = await response.json()\n        toast.error(data.message)\n        console.error(`Error deleting book with ID ${selectedRowId}:`, response.statusText)\n      }\n    } catch (error) {\n      toast.error(`Error deleting book with ID ${selectedRowId}:`, error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  const cancelDelete = () => {\n    // Close modal without performing deletion\n    setVisible(false)\n    setIsProductModalOpen(true)\n    console.log('Selected Row ID in handleDelete:', selectedRowId)\n  }\n  //detail book\n  const handleShowProduct = async (selectedItemId) => {\n    try {\n      setSpinning(true)\n      console.log(selectedItemId)\n      const response = await fetch(`${API_BASE_URL}/books/${selectedItemId}`)\n      if (response.ok) {\n        const Details = await response.json()\n        setProductDetails(Details.data)\n        //console.log(selectedCategories)\n        //console.log(Details)\n        setIsProductModalOpen(true)\n      } else {\n        console.error('Error fetching product details:', response.statusText)\n      }\n    } catch (error) {\n      console.error('Error fetching product details:', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  useEffect(() => {\n    if (productDetails) {\n      setSelectedCategories(\n        productDetails.categories.map((category) => ({\n          value: category.categoryName,\n          label: category.categoryName,\n        })) || [],\n      )\n      setSelectedAuthors(\n        productDetails.authors.map((author) => ({\n          value: author.authorName,\n          label: author.authorName,\n        })) || [],\n      )\n      setIsProductModalOpen(true)\n    }\n  }, [productDetails])\n  useEffect(() => {\n    if (selectedRowId) {\n      handleShowProduct(selectedRowId)\n    }\n  }, [selectedRowId])\n  const handleCategoryChange = (selectedOptions) => {\n    setSelectedCategories(selectedOptions)\n\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      categories: Array.isArray(selectedOptions) ? selectedOptions : [],\n    }))\n  }\n  const handleAuthorChange = (selectedOptions) => {\n    setSelectedAuthors(selectedOptions)\n\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      authors: Array.isArray(selectedOptions) ? selectedOptions : [],\n    }))\n  }\n  const formatDate = (dateString) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString('en-CA')\n  }\n  //upload edit/show image\n  const handleImageChange = (event) => {\n    const file = event.target.files[0]\n    if (file) {\n      // Cập nhật state selectedFile\n      setSelectedFile(file)\n    }\n    setFormData((prevState) => ({\n      ...prevState,\n      image: file,\n    }))\n  }\n  const handleEditImage = () => {\n    const fileInput = document.getElementById('image')\n    fileInput.click()\n  }\n  const handleEditForm = () => {\n    setIsEditMode(true)\n  }\n  //api upload book\n  const handleUploadBook = async (selectedItemId) => {\n    console.log(selectedItemId)\n    console.log(formData)\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n    const formDataToSend = new FormData()\n    for (const key in formData) {\n      if (key === 'categories') {\n        // Lấy mảng các giá trị của categories và chỉ lấy thuộc tính value\n        const categoryValues = selectedCategories.map((category) => category.value)\n        formDataToSend.append(key, JSON.stringify(categoryValues))\n      } else if (key === 'authors') {\n        // Lấy mảng các giá trị của authors và chỉ lấy thuộc tính value\n        const authorValues = selectedAuthors.map((author) => author.value)\n        formDataToSend.append(key, JSON.stringify(authorValues))\n      } else {\n        formDataToSend.append(key, formData[key])\n      }\n    }\n    try {\n      setSpinning(true)\n      const response = await fetch(`${API_BASE_URL}/books/${selectedItemId}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        body: formDataToSend,\n      })\n\n      if (response.ok) {\n        console.log('Dữ liệu đã được gửi thành công.')\n        const data = await response.json()\n        toast.success(data.message, {\n          onClose: () => {\n            fetchBooks()\n            setIsProductModalOpen(false)\n          },\n        })\n      } else {\n        const error = await response.json()\n        toast.info(error.message)\n      }\n    } catch (error) {\n      toast.error('Lỗi trong quá trình xử lý yêu cầu:', error)\n    } finally {\n      setSpinning(false)\n    }\n  }\n  const handleInputChange = (fieldName, value) => {\n    setFormData((prevState) => ({\n      ...prevState,\n      [fieldName]: Array.isArray(prevState[fieldName]) ? prevState[fieldName] : value,\n    }))\n  }\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Danh sách sản phẩm</strong> <small></small>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tựa đề</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Thể loại</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tác giả</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Số lượng</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Giá tiền</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>\n                {books.map((book, index) => (\n                  <CTableRow\n                    key={index}\n                    active={selectedRowId === book._id}\n                    onClick={(e) => {\n                      handleRowClick(book._id)\n                    }}\n                  >\n                    <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                    <CTableDataCell>{book.title}</CTableDataCell>\n                    <CTableDataCell>\n                      {book.categories && book.categories.length > 0\n                        ? book.categories[0].categoryName\n                        : ''}\n                    </CTableDataCell>\n                    <CTableDataCell>\n                      {book.authors && book.authors.length > 0 ? book.authors[0].authorName : ''}\n                    </CTableDataCell>\n                    <CTableDataCell>{book.stock}</CTableDataCell>\n                    <CTableDataCell>{book.price}</CTableDataCell>\n                  </CTableRow>\n                ))}\n              </CTableBody>\n            </CTable>\n            {selectedRowId && (\n              <CModal visible={isPopupOpen} onClose={() => setIsPopupOpen(false)}>\n                <CModalHeader closeButton>\n                  <CModalTitle>Chọn chức năng</CModalTitle>\n                </CModalHeader>\n                <CModalBody className=\"edit-buton\">\n                  <CButton\n                    onClick={() => handleShowProduct(selectedRowId)}\n                    className=\"edit-btn\"\n                    color=\"primary\"\n                  >\n                    Chi tiết\n                  </CButton>\n                  {/* <CButton\n                    onClick={() => handleAddProduct(selectedRowId)}\n                    className=\"edit-btn\"\n                    color=\"primary\"\n                  >\n                    Thêm\n                  </CButton>\n                  <CButton\n                    onClick={() => handleEditProduct(selectedRowId)}\n                    className=\"edit-btn\"\n                    color=\"primary\"\n                  >\n                    Sửa\n                  </CButton>\n                  <CButton\n                    onClick={() => handleDeleteProduct(selectedRowId)}\n                    className=\"edit-btn\"\n                    color=\"primary\"\n                  >\n                    Xóa\n                  </CButton> */}\n                </CModalBody>\n              </CModal>\n            )}\n            {/* Thông báo xóa */}\n            <CModal\n              alignment=\"center\"\n              visible={visible}\n              onClose={() => setVisible(false)}\n              aria-labelledby=\"DeleteConfirmationModal\"\n            >\n              <CModalHeader closeButton>\n                <CModalTitle id=\"DeleteConfirmationModal\">Xác nhận xóa</CModalTitle>\n              </CModalHeader>\n              <CModalBody>Bạn có chắc muốn xóa?</CModalBody>\n              <CModalFooter>\n                <CButton color=\"secondary\" onClick={cancelDelete}>\n                  Hủy\n                </CButton>\n                <CButton\n                  color=\"danger\"\n                  onClick={() => {\n                    confirmDelete(selectedRowId)\n                  }}\n                >\n                  Xóa\n                </CButton>\n              </CModalFooter>\n            </CModal>\n            {/* Modal xem chi tiết */}\n            <CModal\n              size=\"lg\"\n              alignment=\"center\"\n              visible={isProductModalOpen}\n              onClose={() => {\n                resetProductDetails()\n                setIsProductModalOpen(false)\n              }}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>Chi tiết sản phẩm</CModalTitle>\n                <div style={{ marginLeft: '450px' }}>\n                  <CButton color=\"primary\" onClick={handleEditForm}>\n                    Sửa\n                  </CButton>\n                  <CButton\n                    style={{ marginLeft: '10px' }}\n                    color=\"danger\"\n                    onClick={() => {\n                      handleDelete(selectedRowId)\n                    }}\n                  >\n                    Xóa\n                  </CButton>\n                </div>\n              </CModalHeader>\n              <CModalBody>\n                {/* Render product details here */}\n                {productDetails && (\n                  <>\n                    <p>\n                      Tựa đề:\n                      <CFormInput\n                        aria-label=\"Tựa đề\"\n                        disabled={!isEditMode}\n                        value={formData.title || ''}\n                        onChange={(e) => handleInputChange('title', e.target.value)}\n                      />\n                    </p>\n                    <p>\n                      {' '}\n                      Thể loại:\n                      <Select\n                        isDisabled={!isEditMode}\n                        isMulti\n                        isClearable\n                        onChange={handleCategoryChange}\n                        options={categoryOptions}\n                        value={selectedCategories || []}\n                      />\n                    </p>\n                    <p>\n                      Tác giả:{' '}\n                      <Select\n                        isDisabled={!isEditMode}\n                        isMulti\n                        isClearable\n                        onChange={handleAuthorChange}\n                        options={authorOptions}\n                        value={selectedAuthors || []}\n                      />\n                    </p>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"stock\">Số Lượng:</CFormLabel>\n                          <CFormInput\n                            disabled={!isEditMode}\n                            type=\"number\"\n                            id=\"stock\"\n                            name=\"stock\"\n                            placeholder=\"Nhập số lượng\"\n                            value={formData.stock || ''}\n                            onChange={(e) => handleInputChange('stock', e.target.value)}\n                          />\n                        </CCol>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"price\">Giá tiền:</CFormLabel>\n                          <CFormInput\n                            disabled={!isEditMode}\n                            type=\"number\"\n                            id=\"price\"\n                            name=\"price\"\n                            placeholder=\"Ngôn ngữ sách\"\n                            value={formData.price || 0}\n                            onChange={(e) => handleInputChange('price', e.target.value)}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"pageNumbers\">Số trang:</CFormLabel>\n                          <CFormInput\n                            disabled={!isEditMode}\n                            type=\"text\"\n                            id=\"pageNumbers\"\n                            name=\"pageNumbers\"\n                            placeholder=\"Nhập số trang\"\n                            value={formData.pageNumbers}\n                            onChange={(e) => handleInputChange('pageNumbers', e.target.value)}\n                          />\n                        </CCol>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"publisher\">Nhà xuất bản:</CFormLabel>\n                          <CFormInput\n                            disabled={!isEditMode}\n                            type=\"text\"\n                            id=\"publisher\"\n                            name=\"publisher\"\n                            placeholder=\"Nhập nhà xuất bản\"\n                            value={formData.publisher}\n                            onChange={(e) => handleInputChange('publisher', e.target.value)}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"publishDate\">Ngày xuất bản:</CFormLabel>\n                          <CFormInput\n                            disabled={!isEditMode}\n                            type=\"date\"\n                            id=\"publishedDate\"\n                            name=\"publishedDate \"\n                            placeholder=\"Nhập ngày xuất bản\"\n                            value={formatDate(formData.publishedDate)}\n                            onChange={(e) => handleInputChange('publishedDate', e.target.value)}\n                          />\n                        </CCol>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"language\">Ngôn ngữ:</CFormLabel>\n                          <CFormInput\n                            disabled={!isEditMode}\n                            type=\"text\"\n                            id=\"language\"\n                            name=\"language\"\n                            placeholder=\"Nhập ngôn ngữ\"\n                            value={formData.language}\n                            onChange={(e) => handleInputChange('language', e.target.value)}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    Mã định danh ISBN:{' '}\n                    <CFormInput\n                      disabled={!isEditMode}\n                      type=\"text\"\n                      id=\"isbn\"\n                      name=\"isbn\"\n                      placeholder=\"Nhập mã isbn\"\n                      value={formData.isbn}\n                      onChange={(e) => handleInputChange('isbn', e.target.value)}\n                    />\n                    <div>\n                      Mô tả:\n                      <CFormTextarea\n                        disabled={!isEditMode}\n                        rows={5}\n                        type=\"text\"\n                        id=\"description\"\n                        name=\"description\"\n                        placeholder=\"Mô tả sách\"\n                        value={formData.description}\n                        onChange={(e) => handleInputChange('description', e.target.value)}\n                      />\n                    </div>\n                    <br />\n                    <div className=\"mb-3\">\n                      <CFormInput\n                        type=\"file\"\n                        id=\"image\"\n                        name=\"image\"\n                        accept=\".png, .jpg, .jpeg\"\n                        style={{ display: 'none' }}\n                        onChange={handleImageChange}\n                      />\n                    </div>\n                    <p>Ảnh sản phẩm</p>\n                    <div className=\"text-center position-relative\">\n                      <CImage\n                        disabled={!isEditMode}\n                        rounded\n                        src={\n                          selectedFile ? URL.createObjectURL(selectedFile) : productDetails.image\n                        }\n                        width={200}\n                        height={200}\n                        style={{\n                          objectFit: 'cover',\n                          border: '1px solid rgba(0, 0, 0, 0.5)',\n                          borderRadius: '10px',\n                        }}\n                        onChange={handleImageChange}\n                      />\n                      <div\n                        className=\"position-absolute bottom-0 start-50 translate-middle-x\"\n                        style={{ zIndex: 1 }}\n                      >\n                        <CButton\n                          disabled={!isEditMode}\n                          className=\"mb-0 text-white\"\n                          style={{\n                            backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                            border: 'none',\n                            borderRadius: '0 0 10px 10px',\n                            width: '200px',\n                            fontSize: '20px',\n                          }}\n                          onClick={handleEditImage}\n                        >\n                          Sửa\n                        </CButton>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CModalBody>\n              <CModalFooter>\n                <CButton\n                  className=\"custom-button\"\n                  style={{ backgroundColor: 'green', border: 'none' }}\n                  disabled={!isEditMode}\n                  onClick={() => handleUploadBook(selectedRowId)}\n                >\n                  Lưu\n                </CButton>\n              </CModalFooter>\n            </CModal>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n      />\n      <Spin spinning={spinning} fullscreen />\n    </CRow>\n  )\n}\n\nexport default Tables\n"],"names":["Tables","books","setBooks","useState","selectedItems","setSelectedItems","visible","setVisible","isAllChecked","setIsAllChecked","selectedRowId","setSelectedRowId","isPopupOpen","setIsPopupOpen","productDetails","setProductDetails","isProductModalOpen","setIsProductModalOpen","categoryOptions","setCategoryOptions","selectedCategories","setSelectedCategories","authorOptions","setAuthorOptions","selectedAuthors","setSelectedAuthors","selectedFile","setSelectedFile","isEditMode","setIsEditMode","selectedDeleteId","setSelectedDeleteId","spinning","setSpinning","formData","setFormData","title","categories","stock","authors","price","isbn","pageNumbers","publishedDate","publisher","language","description","image","useEffect","resetProductDetails","fetchBooks","async","response","fetch","concat","API_BASE_URL","ok","book","json","data","console","error","statusText","categoryResponse","categoryData","log","Array","isArray","map","category","value","categoryName","label","authorResponse","authorData","author","authorName","fetchOptions","length","handleShowProduct","selectedItemId","Details","handleImageChange","event","file","target","files","prevState","handleInputChange","fieldName","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","index","active","_id","onClick","e","id","CTableDataCell","CModal","onClose","CModalHeader","closeButton","CModalTitle","CModalBody","CButton","color","alignment","CModalFooter","cancelDelete","userInfoString","localStorage","getItem","token","JSON","parse","accessToken","method","headers","Authorization","prevBooks","filter","toast","success","message","confirmDelete","size","style","marginLeft","handleEditForm","handleDelete","_Fragment","CFormInput","disabled","onChange","Select","isDisabled","isMulti","isClearable","selectedOptions","prevFormData","options","CFormLabel","htmlFor","type","name","placeholder","dateString","Date","toLocaleDateString","CFormTextarea","rows","accept","display","CImage","rounded","src","URL","createObjectURL","width","height","objectFit","border","borderRadius","zIndex","backgroundColor","fontSize","handleEditImage","document","getElementById","click","formDataToSend","FormData","key","categoryValues","append","stringify","authorValues","body","info","handleUploadBook","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","Spin","fullscreen"],"sourceRoot":""}