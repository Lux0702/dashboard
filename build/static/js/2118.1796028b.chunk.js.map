{"version":3,"file":"static/js/2118.1796028b.chunk.js","mappings":"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","sources":["utils/formatCurrent.js","views/base/breadcrumbs/Breadcrumbs.js"],"sourcesContent":["import { format } from 'date-fns'\nexport const formatCurrency = (value) => {\n  const formattedValue = new Intl.NumberFormat('vi-VN', {\n    style: 'currency',\n    currency: 'VND',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value)\n  return formattedValue\n}\nexport const formatDateV2 = (dateString) => {\n  const date = new Date(dateString)\n  return date.toLocaleDateString('en-CA')\n}\n\nexport const formatDate = (dateString) => {\n  return format(new Date(dateString), 'dd-MM-yyyy')\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  CBreadcrumb,\n  CBreadcrumbItem,\n  CCard,\n  CBadge,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CLink,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CModalFooter,\n  CFormInput,\n  CFormLabel,\n  CImage,\n  CDropdown,\n  CDropdownToggle,\n  CDropdownMenu,\n  CDropdownItem,\n  CModal,\n  CModalBody,\n  CModalHeader,\n  CModalTitle,\n  CButton,\n  CInputGroupText,\n  CInputGroup,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport * as icon from '@coreui/icons'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { API_BASE_URL } from 'src/constant'\nimport { Spin, Tabs } from 'antd'\nimport { formatCurrency, formatDate, formatDateV2 } from 'src/utils/formatCurrent'\nconst Breadcrumbs = () => {\n  const [books, setBooks] = useState([])\n  const [orders, setOrders] = useState([])\n  const [users, setUsers] = useState([])\n  const [selectedUser, setSelectedUser] = useState(null)\n  const [selectedBook, setSelectedBook] = useState([])\n  const [selectedRowId, setSelectedRowId] = useState(null)\n  const [orderDetail, setOrderDetail] = useState(null)\n  const [isOrderModalOpen, setIsOrderModalOpen] = useState(false)\n  const [spinning, setSpinning] = useState(false)\n  const [statusOptions, setStatusOptions] = useState([\n    { status: 'PROCESSING', color: 'blue' },\n    { status: 'DELIVERING', color: 'orange' },\n    { status: 'DELIVERED', color: 'green' },\n    { status: 'PENDING', color: 'gray' },\n  ])\n  const resetRow = () => {\n    setSelectedRowId(null)\n  }\n  useEffect(() => {\n    if (!isOrderModalOpen) {\n      resetRow()\n    }\n  }, [isOrderModalOpen])\n  //get all user\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const userInfoString = localStorage.getItem('userInfo')\n      const userInfo = JSON.parse(userInfoString)\n      const token = userInfo.data.accessToken\n      try {\n        const response = await fetch(`${API_BASE_URL}/admin/dashboard/users`, {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        if (response.ok) {\n          const user = await response.json()\n          setUsers(user.data)\n          console.log('get user success')\n        } else {\n          console.error('Error fetching users:', response.statusText)\n        }\n      } catch (error) {\n        console.error('Error fetching users:', error)\n      }\n    }\n    fetchUsers()\n  }, [])\n  //get all  book\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/books`)\n        if (response.ok) {\n          const book = await response.json()\n          setBooks(book.data)\n          console.log('Get data success', books)\n        } else {\n          console.error('Error fetching books:', response.statusText)\n        }\n      } catch (error) {\n        console.error('Error fetching books:', error)\n      }\n    }\n    fetchBooks()\n  }, [])\n  //detail order\n  const handleShowOrderDetail = async (selectedItemId) => {\n    console.log(selectedItemId)\n    try {\n      const userInfoString = localStorage.getItem('userInfo')\n      const userInfo = JSON.parse(userInfoString)\n      const token = userInfo.data.accessToken\n      console.log('id và token:', selectedItemId, token)\n      const response = await fetch(`${API_BASE_URL}/orders/${selectedItemId}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      if (response.ok) {\n        const Details = await response.json()\n        setOrderDetail(Details.data)\n        const foundUser = users.find((user) => user.userId === orderDetail.user)\n        const foundBooks = orderDetail.orderItems.map((orderItem) => {\n          return books.find((book) => book._id === orderItem.book)\n        })\n        console.log(orderDetail)\n        setSelectedUser(foundUser)\n        setSelectedBook(foundBooks)\n        console.log(selectedBook)\n        setIsOrderModalOpen(true)\n        console.log('get detail success')\n      } else {\n        console.error('lấy dữ liệu thấy bại:', response.statusText)\n      }\n    } catch (error) {\n      console.error('Lỗi kết nối:', error)\n    }\n  }\n  const handleStatusChange = (selectedStatus) => {\n    // Cập nhật trạng thái cho đơn hàng với ID tương ứng\n    const updatedOrders = orders.map((order) =>\n      order._id === selectedRowId ? { ...order, status: selectedStatus } : order,\n    )\n    setOrders(updatedOrders)\n    updateOrderStatus(selectedRowId, selectedStatus)\n  }\n  const handleRowClick = (id) => {\n    setSelectedRowId(id)\n    console.log(id)\n    //setIsPopupOpen(true)\n    //handleShowProduct(selectedRowId)\n  }\n  //Get all orders\n  useEffect(() => {\n    const fetchOrders = async () => {\n      const userInfoString = localStorage.getItem('userInfo')\n      const userInfo = JSON.parse(userInfoString)\n      const token = userInfo.data.accessToken\n      try {\n        setSpinning(true)\n        const response = await fetch(`${API_BASE_URL}/orders`, {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        if (response.ok) {\n          const order = await response.json()\n          const sortedOrders = [...order.data].sort(\n            (a, b) => new Date(b.orderDate) - new Date(a.orderDate),\n          )\n          setOrders(sortedOrders)\n        } else {\n          console.error('Error fetching orders:', response.statusText)\n        }\n      } catch (error) {\n        console.error('Error fetching orders:', error)\n      } finally {\n        setSpinning(false)\n      }\n    }\n    fetchOrders()\n  }, [])\n\n  //custom dropdown\n  const vars = {\n    '--cui-dropdown-border': 'none',\n    '--cui-dropdown-border-radius': '8px',\n    '--cui-btn-hover-border-color': 'none',\n  }\n  //Upload status order\n  const updateOrderStatus = async (orderId, newStatus) => {\n    const userInfoString = localStorage.getItem('userInfo')\n    const userInfo = JSON.parse(userInfoString)\n    const token = userInfo.data.accessToken\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/orders/${orderId}/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ status: newStatus }),\n      })\n\n      if (response.ok) {\n        console.log(`Order ${orderId} status updated to ${newStatus}`)\n        const data = await response.json()\n        toast.success(data.message)\n      } else {\n        console.error('Error updating order status:', response.statusText)\n        const data = await response.json()\n        toast.error(data.message)\n      }\n    } catch (error) {\n      toast.error('Error updating order status:', error)\n    }\n  }\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Danh sách đơn hàng</strong>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell scope=\"col\">*</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tên người nhận</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Số điện thoại</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Địa chỉ</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Ngày đặt hàng</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Tổng tiền</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Trạng thái</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>\n                {orders.map((order, index) => (\n                  <CTableRow\n                    key={index}\n                    active={selectedRowId === order._id}\n                    onClick={(e) => {\n                      handleRowClick(order._id)\n                    }}\n                  >\n                    <CTableDataCell>\n                      <CIcon\n                        icon={icon.cilList}\n                        size=\"xl\"\n                        onClick={() => handleShowOrderDetail(selectedRowId)}\n                      />\n                    </CTableDataCell>\n                    <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                    <CTableDataCell>{order.fullName}</CTableDataCell>\n                    <CTableDataCell>{order.phone}</CTableDataCell>\n                    <CTableDataCell>{order.address}</CTableDataCell>\n                    <CTableDataCell>{formatDate(order.orderDate)}</CTableDataCell>\n                    <CTableDataCell>{formatCurrency(order.totalAmount) || 0}</CTableDataCell>\n                    <CTableDataCell>\n                      <CDropdown variant=\"btn-group\" style={{ borderRadius: '12px' }}>\n                        <CDropdownToggle\n                          style={{\n                            backgroundColor: statusOptions.find(\n                              (opt) => opt.status === order.status,\n                            )?.color,\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '20px',\n                          }}\n                        >\n                          {order.status}\n                        </CDropdownToggle>\n                        <CDropdownMenu style={{ borderRadius: '12px' }}>\n                          {statusOptions.map((option, index) => (\n                            <CDropdownItem\n                              style={{ borderRadius: '12px' }}\n                              key={index}\n                              onClick={() => handleStatusChange(option.status)}\n                            >\n                              {option.status}\n                            </CDropdownItem>\n                          ))}\n                        </CDropdownMenu>\n                      </CDropdown>\n                    </CTableDataCell>\n                  </CTableRow>\n                ))}\n              </CTableBody>\n            </CTable>\n            {/* Modal xem chi tiết */}\n            <CModal\n              size=\"lg\"\n              alignment=\"center\"\n              visible={isOrderModalOpen}\n              onClose={() => {\n                setIsOrderModalOpen(false)\n              }}\n            >\n              <CModalHeader closeButton>\n                <CModalTitle>\n                  Chi tiết đơn hàng <br />\n                  <CBadge color=\"info\">\n                    <small style={{ fontSize: '10px' }}>\n                      <em>\n                        {orderDetail &&\n                          (orderDetail.paymentStatus === 'NOT_PAID'\n                            ? 'Chưa thanh toán'\n                            : 'Đã thanh toán')}\n                      </em>\n                    </small>\n                  </CBadge>\n                </CModalTitle>\n              </CModalHeader>\n              <CModalBody>\n                {/* Render product details here */}\n                {orderDetail && (\n                  <>\n                    <p>\n                      Tên người đặt hàng:\n                      <CFormInput\n                        aria-label=\"Tựa đề\"\n                        disabled\n                        value={selectedUser ? selectedUser.fullName : ''}\n                      />\n                    </p>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"totalAmount\">Tổng đơn hàng:</CFormLabel>\n                          <CInputGroup className=\"mb-3\">\n                            <CFormInput\n                              disabled\n                              type=\"text\"\n                              id=\"totalAmount\"\n                              name=\"totalAmount\"\n                              value={formatCurrency(orderDetail.totalAmount) || ''}\n                            />\n                            <CInputGroupText>VNĐ</CInputGroupText>\n                          </CInputGroup>\n                        </CCol>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"orderDate\">Ngày đặt hàng</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"date\"\n                            id=\"orderDate\"\n                            name=\"orderDate\"\n                            value={formatDateV2(orderDetail.orderDate)}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"status\">Trạng thái:</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"text\"\n                            id=\"status\"\n                            name=\"status\"\n                            value={orderDetail.status || ''}\n                          />\n                        </CCol>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"phone\">Số điện thoại người nhận</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"text\"\n                            id=\"phone\"\n                            name=\"phone\"\n                            value={orderDetail.phone || 0}\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"fullName\">Tên người nhận:</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"text\"\n                            id=\"fullName\"\n                            name=\"fullName\"\n                            placeholder=\"Nhập giá tiền\"\n                            value={orderDetail.fullName}\n                          />\n                        </CCol>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"address\">Địa chỉ nhận hàng:</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"text\"\n                            id=\"address\"\n                            name=\"address\"\n                            value={orderDetail.address}\n                          />\n                        </CCol>\n                        <CCol xs=\"6\" className=\"mb-3\">\n                          <CFormLabel htmlFor=\"paymentMethod\">Phương thức thanh toán</CFormLabel>\n                          <CFormInput\n                            disabled\n                            type=\"text\"\n                            id=\"paymentMethod\"\n                            name=\"paymentMethod\"\n                            value={\n                              (orderDetail.paymentMethod === 'ON_DELIVERY'\n                                ? 'Thanh toán khi nhận hàng - COD'\n                                : 'Thanh toán online') || 0\n                            }\n                          />\n                        </CCol>\n                      </CRow>\n                    </div>\n                    <div>\n                      <p>Các mặt hàng:</p>\n                      <CAccordion flush>\n                        {orderDetail &&\n                          orderDetail.orderItems &&\n                          orderDetail.orderItems.map((item, index) => (\n                            <CAccordionItem key={index}>\n                              <CAccordionHeader>\n                                {index + 1}. {item.book.title}\n                              </CAccordionHeader>\n                              <CAccordionBody>\n                                <p>\n                                  <strong>Mã sản phẩm:</strong> {item.book._id}\n                                </p>\n                                <p>\n                                  <strong>Số lượng:</strong> {item.quantity}\n                                </p>\n                                <p>\n                                  <strong>Giá tiền:</strong> {formatCurrency(item.book.price) || 0}\n                                </p>\n                                <p>\n                                  <strong>Thành tiền:</strong>{' '}\n                                  {formatCurrency(item.book.price * item.quantity) || 0}\n                                </p>\n                              </CAccordionBody>\n                            </CAccordionItem>\n                          ))}\n                      </CAccordion>\n                    </div>\n                  </>\n                )}\n              </CModalBody>\n              {/* <CModalFooter>\n              </CModalFooter> */}\n            </CModal>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n      />\n      <Spin spinning={spinning} fullscreen />\n    </CRow>\n  )\n}\n\nexport default Breadcrumbs\n"],"names":["formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDateV2","dateString","Date","toLocaleDateString","formatDate","Breadcrumbs","books","setBooks","useState","orders","setOrders","users","setUsers","selectedUser","setSelectedUser","selectedBook","setSelectedBook","selectedRowId","setSelectedRowId","orderDetail","setOrderDetail","isOrderModalOpen","setIsOrderModalOpen","spinning","setSpinning","statusOptions","setStatusOptions","status","color","useEffect","async","userInfoString","localStorage","getItem","token","JSON","parse","data","accessToken","response","fetch","concat","API_BASE_URL","method","headers","Authorization","ok","user","json","console","log","error","statusText","fetchUsers","book","fetchBooks","sortedOrders","sort","a","b","orderDate","fetchOrders","updateOrderStatus","orderId","newStatus","body","stringify","toast","success","message","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","order","index","_statusOptions$find","active","_id","onClick","e","id","CTableDataCell","CIcon","icon","size","selectedItemId","Details","foundUser","find","userId","foundBooks","orderItems","orderItem","handleShowOrderDetail","fullName","phone","address","totalAmount","CDropdown","variant","borderRadius","CDropdownToggle","backgroundColor","opt","border","CDropdownMenu","option","CDropdownItem","selectedStatus","updatedOrders","handleStatusChange","CModal","alignment","visible","onClose","CModalHeader","closeButton","CModalTitle","CBadge","fontSize","paymentStatus","CModalBody","_Fragment","CFormInput","disabled","CFormLabel","htmlFor","CInputGroup","type","name","CInputGroupText","placeholder","paymentMethod","CAccordion","flush","item","CAccordionItem","CAccordionHeader","title","CAccordionBody","quantity","price","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","Spin","fullscreen"],"sourceRoot":""}